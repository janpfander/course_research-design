---
title: "Data manipulation basics"
format: 
  revealjs:
    theme: simple
    smaller: true
    slide-number: true
    # incremental: true
    # code-link: true
    chalkboard: true
    history: false
---

```{r}
library(tidyverse)
library(kableExtra)
```

## Overview

::::: columns
::: {.column style="font-size: smaller;"}
1.  **The `tidyverse`**
    -   R Packages
    -   Importing data
2.  **The `dplyr` package**
    -   `filter()`
    -   `mutate()`
    -   `ifelse()`
    -   pipes `|>`
    -   `summarize()`
    -   `group_by()`
:::

::: {.column style="font-size: smaller;"}
3.  **The `tidy` data format**
:::
:::::

# The `tidyverse`

---

## Packages

::: {style="text-align: center;"}
![](images/packages-base.png)
:::

---

## Packages

::: {style="text-align: center;"}
![](images/packages-packages.png)
:::

---

## Packages

::: incremental
-   So far we only used functions that are directly available in R
    -   But there are tons of user-created functions out there that can make your life so much easier
    -   These functions are shared in what we call packages
-   Packages are bundles of functions that R users put at the disposal of other R users
    -   Packages are centralized on the Comprehensive R Archive Network (CRAN)
    -   To download and install a CRAN package you can simply type \`install.packages()
:::

---

## Using packages

:::::::: incremental
::::::: columns
:::: {.column width="50%"}
::: fragment
```{r}
#| eval: false
#| echo: true
install.packages("name")
```
:::

-   files to your computer

-   Do this once per computer
::::

:::: {.column width="50%"}
::: fragment
```{r}
#| eval: false
#| echo: true
library("name")
```
:::

-   Loads the package

-   Do this once per R session
::::
:::::::
::::::::

---

## The `tidyverse`

:::::: columns
:::: {.column width="50%"}
"The tidyverse is an opinionated collection of R packages designed for data science. [All packages share an underlying design philosophy, grammar, and data structures."]{.fragment .fade-in}

::: fragment
… the tidyverse makes data science faster, easier and more fun…
:::
::::

::: {.column width="50%"}
![](images/tidyverse.png)
:::
::::::

---

## The `tidyverse`

::: {style="text-align: center;"}
![](images/tidyverse-language.png)
:::

---

## The `tidyverse`

```{r}
#| eval: false
#| echo: true
library(tidyverse)
```

The tidyverse package is a shortcut for installing and loading all the key tidyverse packages

---

## The `tidyverse`

::::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
install.packages("tidyverse")
```

Installs all of these:

```{r}
#| eval: false
#| echo: true
install.packages("ggplot2")
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
install.packages("purrr")
install.packages("tibble")
install.packages("stringr")
install.packages("forcats")
install.packages("lubridate")
install.packages("hms")
install.packages("DBI")
install.packages("haven")
install.packages("httr")
install.packages("jsonlite")
install.packages("readxl")
install.packages("rvest")
install.packages("xml2")
install.packages("modelr")
install.packages("broom")
```
:::

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
library(tidyverse)
```

Loads all of these:

```{r}
#| eval: false
#| echo: true
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(forcats)
library(lubridate)
```
:::
:::::

---

## Importing data

<table>
  <tr>
    <td><img src="images/readr.png" alt="readr" title="readr" width="150px"></td>
    <td>Work with plain text data</td>
    <td><code>my_data <- read_csv("file.csv")</code></td>
  </tr>
  <tr>
    <td><img src="images/readxl.png" alt="readxl" title="readxl" width="150px"></td>
    <td>Work with Excel files</td>
    <td><code>my_data <- read_excel("file.xlsx")</code></td>
  </tr>
  <tr>
    <td><img src="images/haven.png" alt="haven" title="haven" width="150px"></td>
    <td>Work with Stata, SPSS, and SAS data</td>
    <td><code>my_data <- read_stata("file.dta")</code></td>
  </tr>
</table>

---

:::::: columns
:::: column
::: callout-tip
## Data from R-Packages

Some data sets can be downloaded as packages in R. For example, the [gapminder](https://www.gapminder.org/) data set.
:::

Install the package

```{r}
#| eval: false
#| echo: true
install.packages(gapminder)
```

Then load the data

```{r}
#| echo: true
#| code-overflow: wrap
library(gapminder)

# The data() function in R is used to list, load, 
# and access built-in or package-provided datasets. 
data(gapminder) 
```
::::

::: column
![](images/gapminder.jpg){width="800"}
:::
::::::

# The `dplyr` package

---

::::::: columns
:::: {.column width="50%"}
::: r-stack
`tidyverse`{.fragment .fade-out fragment-index="1"}

`dplyr`{.fragment .fade-in fragment-index="1"}
:::
::::

:::: {.column width="50%"}
::: r-stack
![](images/tidyverse.png){.fragment .semi-fade-out width="500" fragment-index="1"}

![](images/dplyr-old.png){.fragment .fade-in .absolute fragment-index="1" width="200" top="40" right="250"}
:::
::::
:::::::

---

## `dplyr`: verbs for manipulating data

<table>
  <tr>
    <td>Extract rows with <code>filter()</code></td>
    <td><img src="images/filter.png" alt="filter" title="filter" width="200px"></td>
  </tr>
  <tr>
    <td>Extract columns with <code>select()</code></td>
    <td><img src="images/select.png" alt="select" title="select" width="200px"></td>
  </tr>
  <tr>
    <td>Arrange/sort rows with <code>arrange()</code></td>
    <td><img src="images/arrange.png" alt="arrange" title="arrange" width="200px"></td>
  </tr>
  <tr>
    <td>Make new columns with <code>mutate()</code></td>
    <td><img src="images/mutate.png" alt="mutate" title="mutate" width="200px"></td>
  </tr>
  <tr>
    <td>Make group summaries with <code>group_by() |> summarize()</code></td>
    <td><img src="images/summarize.png" alt="summarize" title="summarize" width="200px"></td>
  </tr>
</table>

---

## `filter()`

Extract rows that meet some sort of test

:::::::: columns
::: column
The general idea:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3"
filter(
  some_data, 
  ... # one or more tests 
  )
```
:::

:::::: column
::: fragment
Let's try this on the gapminder data set that you've installed earlier.
:::

::: fragment
```{r}
#| echo: true
#| eval: false
filter(.data = gapminder, country == "Denmark")
```
:::

::: fragment
```{r}
#| echo: false
filter(.data = gapminder, country == "Denmark") |> 
  select(country, continent, year) |> 
  head(5) |> 
  mutate(year = as.character(year)) |> 
  bind_rows(tibble(country = "…", continent = "…", year = "…")) |> 
  knitr::kable(format = "html")
```
:::
::::::
::::::::

---

## Logical tests

::: {style="font-size: 3"}
+----------+--------------------------+-------------+-----------------------+
| Test     | Meaning                  | Test        | Meaning               |
+==========+==========================+=============+=======================+
| `x < y`  | Less than                | `x %in% y`  | In (group membership) |
+----------+--------------------------+-------------+-----------------------+
| `x > y`  | Greater than             | `is.na(x)`  | Is missing            |
+----------+--------------------------+-------------+-----------------------+
| `==`     | Equal to                 | `!is.na(x)` | Is not missing        |
+----------+--------------------------+-------------+-----------------------+
| `x <= y` | Less than or equal to    |             |                       |
+----------+--------------------------+-------------+-----------------------+
| `x >= y` | Greater than or equal to |             |                       |
+----------+--------------------------+-------------+-----------------------+
| `x != y` | Not equal to             |             |                       |
+----------+--------------------------+-------------+-----------------------+
:::

---

## Your turn #1: Filtering

Use `filter()` and logical tests to show…

1.  The data for Canada
2.  All data for countries in Oceania
3.  Rows where the life expectancy is greater than 82

```{r}
countdown::countdown(
  minutes = 4,
  top = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #1: Filtering 

Use `filter()` and logical tests to show…

::: fragment
1.  The data for Canada

```{r}
#| echo: true
#| eval: false
filter(gapminder, country == "Canada")
```
:::

::: fragment
2.  All data for countries in Oceania

```{r}
#| echo: true
#| eval: false
filter(gapminder, continent == "Oceania")
```
:::

::: fragment
3.  Rows where the life expectancy is greater than 82

```{r}
#| echo: true
#| eval: false
filter(gapminder, lifeExp > 82)
```
:::

---

## Common Mistakes

::: fragment
Using `=` instead of `==`
:::

::::::: columns
:::: column
::: fragment
Bad

```{r}
#| echo: true
#| eval: false
filter(gapminder, country = "Canada")
```
:::
::::

:::: column
::: fragment
Good

```{r}
#| echo: true
#| eval: false
filter(gapminder, country == "Canada")
```
:::
::::
:::::::

<br>

<br>

::: fragment
Forgetting quotes (`""`)
:::

::::::: columns
:::: column
::: fragment
Bad

```{r}
#| echo: true
#| eval: false
filter(gapminder, country == Canada)
```
:::
::::

:::: column
::: fragment
Good

```{r}
#| echo: true
#| eval: false
filter(gapminder, country == "Canada")
```
:::
::::
:::::::

---

## `filter()` with multiple conditions 

Extract rows that meet *every* test

```{r}
#| echo: true
#| output-location: fragment
filter(gapminder, country == "Denmark", year > 2000)
```

---

## Boolean operators

+----------+---------+
| Operator | Meaning |
+==========+=========+
| `a & b`  | and     |
+----------+---------+
| `a | b`  | or      |
+----------+---------+
| `!a`     | not     |
+----------+---------+

---

## Boolean operators

<br>

**The default is "and"**

<br>

<br>

These do the same thing:

::::: columns
::: column
```{r}
#| echo: true
#| eval: false
filter(gapminder, 
       country == "Denmark", 
       year > 2000)
```
:::

::: column
```{r}
#| echo: true
#| eval: false
filter(gapminder, 
       country == "Denmark" & 
         year > 2000)
```
:::
:::::

---

## Your turn #2: Filtering

Use `filter()` and Boolean logical tests to show…

1.  Canada before 1970
2.  Countries where life expectancy in 2007 is below 50
3.  Countries where life expectancy in 2007 is below 50 and are not in Africa

```{r}
countdown::countdown(
  minutes = 4,
  top = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #2: Filtering 

Use `filter()` and Boolean logical tests to show…

1.  Canada before 1970

```{r}
#| echo: true
#| eval: false
filter(gapminder, country == "Canada", year < 1970)
```

2.  Countries where life expectancy in 2007 is below 50

```{r}
#| echo: true
#| eval: false
filter(gapminder, year == 2007, lifeExp < 50)
```

3.  Countries where life expectancy in 2007 is below 50 and are not in Africa

```{r}
#| echo: true
#| eval: false
filter(gapminder, year == 2007, lifeExp < 50, 
       continent != "Africa")
```

---

## Common Mistakes

::: fragment
Collapsing multiple tests into one
:::

::::::: columns
:::: column
::: fragment
Bad

```{r}
#| echo: true
#| eval: false
filter(gapminder, 
       1960 < year < 1980)
```
:::
::::

:::: column
::: fragment
Good

```{r}
#| echo: true
#| eval: false
filter(gapminder,
       year > 1960, 
       year < 1980)
```
:::
::::
:::::::

<br>

<br>

::: fragment
Using multiple tests instead of `%in%`
:::

::::::: columns
:::: column
::: fragment
Bad

```{r}
#| echo: true
#| eval: false
filter(gapminder,
       country == "Mexico",
       country == "Canada",
       country == "United States")
```
:::
::::

:::: column
::: fragment
Good

```{r}
#| echo: true
#| eval: false
filter(gapminder,
       country %in% c("Mexico", "Canada",
                      "United States"))
```
:::
::::
:::::::

---

## Common Syntax

Every `dplyr` verb function follows the same pattern

<br>

::::: columns
::: column
```{r}
#| echo: true
#| eval: false
verb(data, ...)
```
:::

::: column
`verb` = dplyr function/verb

`data` = data frame to transfom

`...` = what you the verb to do exatly
:::
:::::

---

## `mutate()`

Create new columns

::::::: columns
::: column
The general idea:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3"
mutate(
  some_data, 
  ... # new columns to make
  )
```
:::

::::: column
::: fragment
Let's try this on the gapminder data

```{r}
#| echo: true
#| eval: false
mutate(gapminder, gdp = gdpPercap * pop)
```
:::

::: fragment
```{r}
#| echo: false
gapminder |> 
  mutate(gdp = gdpPercap * pop) |> 
  mutate(`…` = "…") |> 
  select(country, year, `…`, gdp) |> 
  head(6) |> 
  knitr::kable(format = "html")
```
:::
:::::
:::::::

---

## `mutate()`

Create new columns

::::::: columns
::: column
The general idea:

```{r}
#| eval: false
#| echo: true
mutate(
  some_data, 
  ... # new columns to make
  )
```
:::

::::: column
We can also create multiple new columns at once

::: fragment
```{r}
#| echo: true
#| eval: false
mutate(gapminder, gdp = gdpPercap * pop,
                  pop_mil = round(pop / 1000000))
```
:::

::: fragment
```{r}
#| echo: false
gapminder |> 
  mutate(gdp = gdpPercap * pop,
         pop_mil = round(pop / 1000000)) |> 
  mutate(`…` = "…") |> 
  select(country, year, `…`, gdp, pop_mil) |> 
  head(6) |> 
  knitr::kable(format = "html")
```
:::
:::::
:::::::

---

## `ifelse()`

Do conditional tests within `mutate()`

<br>

::::: columns
::: column
```{r}
#| echo: true
#| eval: false
ifelse(test,
       value_if_true, 
       value_if_false)
```
:::

::: column
`test` = a logical test

`value_if_true` = what happens if test is true

`value_if_false` = what happens if test is false
:::
:::::

---

## `ifelse()`

The new variable can take any sort of class

```{r}
#| echo: true
#| eval: false

# a new logical variable
mutate(gapminder, 
       after_1960 = ifelse(year > 1960, TRUE, FALSE)
       )
```

<br>

```{r}
#| echo: true
#| eval: false

# a new character variable
mutate(gapminder, 
       after_1960 = ifelse(year > 1960, 
                           "After 1960", 
                           "Before 1960")
       )
```

<br>

```{r}
#| echo: true
#| eval: false

# a new numeric variable
mutate(gapminder, 
       after_1960 = ifelse(year > 1960, 0, 1)
       )
```

---

## Your turn #3: Mutating

Use `mutate()` to…

1.  Add an `africa` column that is TRUE if the country is on the African continent
2.  Add a column for logged GDP per capita (hint: use `log()`)
3.  Add an `africa_asia` column that says “Africa or Asia” if the country is in Africa or Asia, and “Not Africa or Asia” if it’s not

```{r}
countdown::countdown(
  minutes = 5,
  top = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #3: Mutating 

Use `mutate()` to…

::: fragment
1.  Add an `africa` column that is TRUE if the country is on the African continent

```{r}
#| echo: true
#| eval: false
mutate(gapminder, africa = ifelse(continent == "Africa", 
                                  TRUE, FALSE))
```
:::

::: fragment
2.  Add a column for logged GDP per capita (hint: use `log()`)

```{r}
#| echo: true
#| eval: false
mutate(gapminder, log_gdpPercap = log(gdpPercap))
```
:::

::: fragment
3.  Add an `africa_asia` column that says “Africa or Asia” if the country is in Africa or Asia, and “Not Africa or Asia” if it’s not

```{r}
#| echo: true
#| eval: false
mutate(gapminder, 
       africa_asia = 
         ifelse(continent %in% c("Africa", "Asia"), 
                "Africa or Asia", 
                "Not Africa or Asia"))
```
:::

---

## What if you have multiple verbs?

::: fragment
Solution 1: Intermediate variables

```{r}
#| eval: false
#| echo: true
gapminder_2002 <- filter(gapminder, year == 2002)

gapminder_2002_log <- mutate(gapminder_2002,
                             log_gdpPercap = log(gdpPercap))
```
:::

::: fragment
Solution 2: Nested functions

```{r}
#| echo: true
#| eval: false
filter(mutate(gapminder_2002, 
              log_gdpPercap = log(gdpPercap)), 
       year == 2002)
```
:::

::: fragment
Solution 3: Pipes!

-   The `|>` operator (pipe) takes an object on the left and passes it as the first argument of the function on the right

```{r}
#| echo: true
#| eval: false
gapminder |> 
  filter(year == 2002) |> 
  mutate(log_gdpPercap = log(gdpPercap))
```
:::

---

## `|>`

Why using pipes?

::: fragment
```{r}
#| echo: true
#| eval: false
#| tidy: true
leave_house(get_dressed(get_out_of_bed(wake_up(me, time = "8:00"), side = "correct"), pants = TRUE, shirt = TRUE), car = TRUE, bike = FALSE)
```

... `r emoji::emoji("exploding_head")` not easy to read
:::

<br>

::: fragment
```{r}
#| echo: true
#| eval: false
me |> 
  wake_up(time = "8:00") |> 
  get_out_of_bed(side = "correct") |> 
  get_dressed(pants = TRUE, shirt = TRUE) |> 
  leave_house(car = TRUE, bike = FALSE)
```

... `r emoji::emoji("tada")` easy to read
:::

---

## `|>` vs `%>%`

-   There are actually multiple pipes!

-   `%>%` was invented first, but requires a package to use

-   `|>` is part of base R

-   They're interchangeable 99% of the time (Just be consistent)

. . .

::: callout-tip
## You do not have to type the pipe by hand every time

You can use the shortcut `cmd + shift + m` in R Studio.
:::

---

## `summarize()`

Compute a table of summaries

:::::::: columns
:::: column
::: fragment
1.  Take a data frame

```{r}
#| echo: false
#| tidy: true
gapminder |> 
  select(country, continent, year, lifeExp) |> 
  head(4) |> 
  mutate_at(vars(year, lifeExp), ~as.character(.)) |> 
  bind_rows(tibble(country = "…", continent = "…", year = "…", lifeExp = "…")) |> 
  knitr::kable(format = "html")
```
:::
::::

::::: column
::: fragment
2.  Make a summary

```{r}
#| echo: true
#| tidy: true
#| output-location: fragment
gapminder |> summarize(mean_life = mean(lifeExp))
```
:::

::: fragment
Or several summaries

```{r}
#| echo: true
#| tidy: styler
#| output-location: fragment
gapminder |> 
  summarize(mean_life = mean(lifeExp),
            min_life = min(lifeExp))
```
:::
:::::
::::::::

---

## Your turn #4: Summarizing

Use `summarize()` to calculate…

1.  The first (minimum) year in the dataset
2.  The last (maximum) year in the dataset
3.  The number of rows in the dataset (use the cheatsheet)
4.  The number of distinct countries in the dataset (use the cheatsheet)

```{r}
countdown::countdown(
  minutes = 5,
  top = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #4: Summarizing 

One Solution for all:

```{r}
#| echo: true
#| eval: true
#| tidy: styler
gapminder |> 
  summarize(first = min(year),
            last = max(year),
            num_rows = n(),
            num_unique = n_distinct(country))
```

---

## Your turn #5: Summarizing

Use `filter()` and `summarize()` to calculate...

1.  the number of unique countries and
2.  the median life expectancy

on the African continent in 2007.

```{r}
countdown::countdown(
  minutes = 5,
  top = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #5: Summarizing 

Use `filter()` and `summarize()` to calculate...

1.  the number of unique countries and
2.  the median life expectancy

on the African continent in 2007.

```{r}
#| echo: true
#| eval: true
#| tidy: styler
gapminder |>
  filter(continent == "Africa", year == 2007) |>
  summarise(n_countries = n_distinct(country), 
            med_le = median(lifeExp))
```

---

## `group_by()`

Put rows into groups based on values in a column

```{r}
#| echo: true
#| eval: false
#| tidy: styler
gapminder |> group_by(continent)
```

-   Nothing happens by itself!

-   Powerful when combined with `summarize()`

---

## `group_by()`

::::::: columns
::: column
```{r}
#| echo: false
#| tidy: true
gapminder |> 
  select(country, continent, year, lifeExp) |> 
  head(4) |> 
  mutate_at(vars(year, lifeExp), ~as.character(.)) |> 
  bind_rows(tibble(country = "…", continent = "…", year = "…", lifeExp = "…")) |> 
  knitr::kable(format = "html")
```
:::

::::: column
::: fragment
A simple summary

```{r}
#| echo: true
#| tidy: true
#| output-location: fragment
gapminder |> 
  summarize(n_countries = n_distinct(country))
```
:::

::: fragment
A grouped summary

```{r}
#| echo: true
#| tidy: styler
#| output-location: fragment
gapminder |> 
  group_by(continent) |> 
  summarize(n_countries = n_distinct(country)) 
```
:::
:::::
:::::::

---

## Your turn #6: Grouping and summarizing

1.  Find the minimum, maximum, and median life expectancy for each continent

<br>

2.  Find the minimum, maximum, and median life expectancy for each continent in 2007 only

```{r}
countdown::countdown(
  minutes = 5,
  bottom = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #6: Grouping and summarizing 

1.  Find the minimum, maximum, and median life expectancy for each continent

```{r}
#| echo: true
#| eval: false
#| tidy: styler
gapminder |> 
  group_by(continent) |> 
  summarize(min_le = min(lifeExp),
            max_le = max(lifeExp),
            med_le = median(lifeExp))
```

2.  Find the minimum, maximum, and median life expectancy for each continent in 2007 only

```{r}
#| echo: true
#| eval: false
#| tidy: styler
gapminder |> 
  filter(year == 2007) |> 
  group_by(continent) |> 
  summarize(min_le = min(lifeExp),
            max_le = max(lifeExp),
            med_le = median(lifeExp))
```

---

## `dplyr`: verbs for manipulating data

<table>
  <tr>
    <td>Extract rows with <code>filter()</code></td>
    <td><img src="images/filter.png" alt="filter" title="filter" width="200px"></td>
  </tr>
  <tr>
    <td>Extract columns with <code>select()</code></td>
    <td><img src="images/select.png" alt="select" title="select" width="200px"></td>
  </tr>
  <tr>
    <td>Arrange/sort rows with <code>arrange()</code></td>
    <td><img src="images/arrange.png" alt="arrange" title="arrange" width="200px"></td>
  </tr>
  <tr>
    <td>Make new columns with <code>mutate()</code></td>
    <td><img src="images/mutate.png" alt="mutate" title="mutate" width="200px"></td>
  </tr>
  <tr>
    <td>Make group summaries with <code>group_by() |> summarize()</code></td>
    <td><img src="images/summarize.png" alt="summarize" title="summarize" width="200px"></td>
  </tr>
</table>

# Tidy data

---

## Tidy data

You can represent the same underlying data in multiple ways.

:::::: columns
::: {.column .fragment width="30%"}
```{r}
#| echo: false
#| eval: true
table1
```
:::

::: {.column .fragment width="30%"}
```{r}
#| echo: false
#| eval: true
table2
```
:::

::: {.column .fragment width="40%"}
```{r}
#| echo: false
#| eval: true
table3
```
:::
::::::

---

## Tidy data

`Tidy` data has the following properties:

::::: columns
::: {.column width="30%"}
```{r}
#| echo: false
#| eval: true
table1
```
:::

::: {.column .fragment width="70%"}
![](images/tidy-1.png){width="800"}

1.  Variables are columns
2.  Observations are rows
3.  Values are cells
:::
:::::

---

## Why ensure that your data is tidy?

There are two main advantages:

::: fragment
1.  There's a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it's easier to learn the tools that work with it because they have an underlying uniformity.
:::

::: fragment
2.  There's a specific advantage to placing variables in columns because it allows R's vectorized nature to shine. As you learned in @sec-mutate and @sec-summarize, most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural.
:::

::: fragment
`dplyr`, `ggplot2`, and all the other packages in the tidyverse are designed to work with tidy data.
:::

---

## Will I ever encounter a dataset that isn't tidy?

::: incremental
Yes, unfortunately, most real data is untidy.

There are two main reasons:

1.  Data is often organized to facilitate some goal other than analysis. For example, it's common for data to be structured to make data entry, not analysis, easy.

2.  Most people aren't familiar with the principles of tidy data, and it's hard to derive them yourself unless you spend a lot of time working with data.
:::

---

## Pivoting data

`tidyr` provides two main functions to "pivot" data in a tidy format: 

- `pivot_longer()` 

and 

- `pivot_wider()`

<br>

Here, we'll only discuss `pivot_longer()` because it's the most common case.

---

## `pivot_longer()`

-   Suppose we have three patients with `id`s A, B, and C, and we take two blood pressure measurements on each patient.
-   We'll create the data with `tribble()`, a handy function for constructing small tibbles by hand:

:::{.fragment}
```{r}
#| echo: true
#| eval: true
df <- tribble(
  ~id,  ~bp1, ~bp2,
   "A",  100,  120,
   "B",  140,  115,
   "C",  120,  125
)

df
```
:::

---

## `pivot_longer()`

-   We want our new dataset to have three variables: `id` (already exists), `measurement` (the column names), and `value` (the cell values)
-   To achieve this, we need to pivot `df` longer

![](images/variables.png){width="800"}

---

## `pivot_longer()`

-   The values in a column that was already a variable in the original dataset (`id`) need to be repeated, once for each column that is pivoted.

![](images/variables.png){width="800"}

---

## `pivot_longer()`

- The column names become values of the new variable `measurement`

![](images/column-names.png){width="800"}

---

## `pivot_longer()`

-   The cell values become values of the new variable `value`

![](images/cell-values.png){width="800"}
---

## `pivot_longer()`

::::{.columns}

:::{.column}

```{r}
#| echo: false
#| eval: true
df
```

```{r}
#| echo: true
#| eval: true
df |> 
  pivot_longer(
    cols = bp1:bp2,
    names_to = "measurement",
    values_to = "value"
  )
```

:::

:::{.column}

There are three key arguments:

-   `cols` specifies which columns need to be pivoted, i.e. which columns aren't variables. This argument uses the same syntax as `select()` 
-   `names_to` names the variable in which column names should be stored
-   `values_to` names the variable in which cell values should be stored

:::

::::

---

## Your turn #7: Pivoting 

The `billboard` dataset which comes with the `tidyverse` package records the billboard rank of songs in the year 2000.

```{r}
#| echo: true
#| eval: true
head(billboard)
```

- In this dataset, each observation is a song.
- The first three columns (`artist`, `track` and `date.entered`) are variables that describe the song.
- Then we have 76 columns (`wk1`-`wk76`) that describe the rank of the song in each week.

## Your turn #7: Pivoting 

1. Use `pivot_longer()` to tidy the data (Tip: Create the new variables `week` and `rank`). Assign the resulting data frame to a new data frame called `tidy_billboard`. 

2. Use the new `tidy_billboard` data frame to calculate which song has been the longest on rank 1 (Tip: use `filter()`, `group_by()` and `summarize()`)

```{r}
countdown::countdown(
  minutes = 5,
  bottom = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #7: Pivoting 

1. Use `pivot_longer()` to tidy the data (Tip: Create the new variables `week` and `rank`). Assign the resulting data frame to a new data frame called `tidy_billboard`. 
```{r}
#| echo: true
#| eval: true
tidy_billboard <- billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  ) 
```

2. Use the new `tidy_billboard` data frame to calculate which song has been the longest on rank 1 (Tip: use `filter()`, `group_by()` and `summarize()`)

```{r}
#| echo: true
#| eval: false

tidy_billboard |> 
  filter(rank == 1) |> 
  group_by(track) |> 
  summarize(weeks_on_rank_1 = n()) |> 
  arrange(desc(weeks_on_rank_1)) 

# alternative solution
tidy_billboard |> 
  group_by(track) |> 
  summarize(weeks_on_rank_1 = sum(rank == 1, na.rm = TRUE)) |> 
  arrange(desc(weeks_on_rank_1)) 

```

---

## That's it for today :)
