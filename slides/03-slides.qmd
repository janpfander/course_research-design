---
title: "Variables, Distributions and Summary Statistics"
format: 
  revealjs:
    theme: simple
    smaller: true
    slide-number: true
    # incremental: true
    # code-link: true
    chalkboard: true
    history: false
---

```{r}
library(tidyverse)
library(kableExtra)
library(ggpubr)
```

## Today we learn how to describe data

::::: columns
::: {.column style="font-size: smaller;"}
1.  **Variables**
2.  **Distributions**
    -   Definition
    -   Graphical representation
    -   Common distributions
3.  **Central tendency**
    -   Mean
    -   Median 
:::

::: {.column style="font-size: smaller;"}
4.  **Spread**
    -   Range, quantiles, and the IQR
    -   Variance and standard deviation
:::
:::::

---

A variable is ...

. . .

Some measure that can vary.

::: {style="text-align: center;"}
![](images/the_office.gif)
:::

---

## Variables

Imagine you fill out a survey about your way to school.

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(rep(" ", times = 7)
  ),
  Variable_Name = c(rep(" ", times = 7)
  ),
  Variable_Type = c(
    " ", " ", " ",
    " ", " ",
    " ", " "
  )
  )

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(rep(" ", times = 7)
  ),
  Variable_Type = c(
    " ", " ", " ",
    " ", " ",
    " ", " "
  )
)

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    " ", " ", " ",
    " ", " ",
    " ", " "
  )
)

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", " ", " ",
    " ", " ",
    " ", " "
  )
)

# Modify the value to include HTML styling
data$Variable_Type[1] <- cell_spec(data$Variable_Type[1], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", "Nominal", " ",
    " ", " ",
    " ", " "
  )
)

# Modify the value to include HTML styling
data$Variable_Type[2] <- cell_spec(data$Variable_Type[2], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", "Nominal", "Ordinal",
    " ", " ",
    " ", " "
  )
)

# Modify the value to include HTML styling
data$Variable_Type[3] <- cell_spec(data$Variable_Type[3], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", "Nominal", "Ordinal",
    "Nominal", " ",
    " ", " "
  )
)

# Modify the value to include HTML styling
data$Variable_Type[4] <- cell_spec(data$Variable_Type[4], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", "Nominal", "Ordinal",
    "Nominal", "Ordinal",
    " ", " "
  )
)

# Modify the value to include HTML styling
data$Variable_Type[5] <- cell_spec(data$Variable_Type[5], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", "Nominal", "Ordinal",
    "Nominal", "Ordinal",
    "Open-ended", " "
  )
)

# Modify the value to include HTML styling
data$Variable_Type[6] <- cell_spec(data$Variable_Type[6], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Variables

```{r}
#| echo: false


# Create the table
data <- data.frame(
  Question = c(
    "How far do you live from the Jourdan University building?",
    "How do you get there, usually?",
    "How much time approximately does it take you to get there?",
    "What arrondissement/suburb do you live in?",
    "Compared to your classmates, how close do you think you live to University?",
    "What’s the most annoying part of your itinerary to/from university?",
    "Please indicate your level of (dis)agreement with the following statement: 'My itinerary to university is annoying.'"
  ),
  Answer_Option = c(
    "Use the exact distance in km",
    "Bike, Metro, Walking, or Other",
    "less than 15 mins, between 15 and 60 mins, more than 60 mins",
    "Open-ended",
    "Closer, About the same, Further away",
    "Describe briefly",
    "1: Fully disagree – 5: Fully agree"
  ),
  Variable_Name = c(
    "Distance to school", "Mode of transportation", "Travel time",
    "Place of residence", "Relative perceived distance",
    "Object of annoyance", "Degree of annoyance"
  ),
  Variable_Type = c(
    "Numeric", "Nominal", "Ordinal",
    "Nominal", "Ordinal",
    "Open-ended", "Ordinal/Numeric/Discrete"
  )
)

# Modify the value to include HTML styling
data$Variable_Type[7] <- cell_spec(data$Variable_Type[7], extra_css = "border: 3px solid red;")

# Render with kableExtra and small text size
kbl(data, col.names = c("Survey Question", "Answer Options", "Variable Name", "Variable Type"),
    booktabs = TRUE, align = "l", escape = FALSE) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) 
```

---

## Overview Variable Types

```{r}
#| echo: false
variable_types <- data.frame(
  Variable_Type = c("Nominal", "Ordinal", "Continuous", "Discrete", "Qualitative"),
  Description = c(
    "The color of a flower is another example of a nominal variable. 
Is the flower white, orange, or red? None of those options is “more” than the others; they’re just different.",
    "An ordinal variable, just like nominal variables, has categories. But some values are clearly “more” and others clearly “less” - you can ‘order’ observations. However, it is not clear how much more or less one value is than another, and differences might not always be the same between one value and the next.",
    "A continuous variable can take any numeric value within a given range.",
    "A discrete variable is numeric, but can only take specific, distinct values. For example, the score given by a judge to a gymnast (only integer values between 0 and 10).",
"Free text. To quantify it, people typically try to cateogrize them."
  ),
  Example = c(
    "Flower color (White, Orange, Red)",
    "Satisfaction levels (Low, Medium, High)",
    "A person's height (e.g., 170.5 cm)",
    "A judge's score in a gymnast competition (only integer values between 0 and 10)", 
    "Open-ended survey answers (e.g. 'Describe your day in detail') or a data frame with news paper headlines"
  )
)

# Render the table with kable
kbl(variable_types, 
    col.names = c("Variable Type", "Description", "Example"), 
    booktabs = TRUE, 
    align = "l") |> 
  kable_styling(full_width = FALSE, position = "center", font_size = 20) |> 
  column_spec(1, bold = TRUE)  # Make the first column bold and slightly larger
```

# Distributions

---

## Distributions

- The point of descriptive statistics is to **summarize a big table** of values with a small set of **tractable statistics**  

- The most comprehensive way to characterize a variable/vector is to compute its **distribution**:
  - **What** are the **values** the variable takes?
  - **How frequently** does each of these values appear?
  
---

## Distributions

Consider this variable

::::{.columns}

:::{.column style="font-size: smaller;"}

```{r}
#| echo: false
data <- read.csv("../data/distribution_data.csv")

data |> 
  select(V1) 
```
:::

:::{.column .fragment}

We can count how many times each value appears

```{r}
#| echo: false
data |> 
  group_by(V1) |> 
  summarise(n = n())
```

:::{.fragment}
Voilà the distribution of our variable. 
:::

:::

::::

---

## Distributions

We can represent this distribution graphically with a bar plot. 

  - Each possible value on the x-axis
  - Their number of occurrences on the y-axis

```{r name-plot}
ggplot(data, aes(x = V1)) +
  geom_bar(stat = "count", fill = "#6794A7", color = "#014D64", alpha = .8) +
  scale_y_continuous(limits = c(0, 9), breaks = 0:9) + 
  scale_x_discrete(name = "Variable 1", limits = 1:8) +
  theme_minimal(base_size = 16)
```

---

## Distributions

Would that also work for this variable? 

::::{.columns}

:::{.column style="font-size: smaller;"}

```{r}
#| echo: false
data <- read.csv("../data/distribution_data.csv")

data |> 
  select(V1) 
```
:::

:::{.column .fragment}

No! In this case, each value appears only once.

:::
::::

---

## Distributions

This is what the corresponding bar plot would look like

```{r other-name-plot, echo = F, fig.width = 12, fig.height = 6.25, dpi=300, out.width = "83%"}
ggplot(data, aes(x = V2)) +
  geom_bar(stat = "count", fill = "#6794A7", color = "#014D64", alpha = .8) +
  scale_y_continuous(limits = 0:1, breaks = 0:1) + 
  scale_x_continuous(name = "Variable 2", limits = c(0, 9), breaks = 0:9) +
  theme_minimal(base_size = 16)
```

---

## Distributions

For continuous variables, one solution to get a sense of the distribution is to do a **histogram**. 

. . . 

Consider for instance the following variable. For clarity each point is shifted vertically by a random amount.

```{r, echo = F, fig.width = 12, fig.height = 5, dpi=300, out.width = "78%"}
hist_data <- read.csv("../data/hist_illustration.csv") %>%
  mutate(y = runif(1000, 0, 1.45))
jitter_plot <- ggplot(hist_data, aes(x = x, y = y)) + 
  geom_point(alpha = .15, size = 2, fill = "#6794A7", color = "#014D64", height = .5, width = 0) + 
  scale_x_continuous(name = "Variable 3", limits = c(-1.1775, 10.4925), breaks = seq(0, 10, 2.5)) +
  scale_y_continuous(name = "", limits = c(0, 1.6)) + 
  theme_minimal(base_size = 16) + theme(axis.text.y = element_blank())
jitter_plot
```

---

## Distributions

We can divide the domain of this variable into 5 bins

```{r, echo = F, fig.width = 12, fig.height = 5, dpi=300, out.width = "78%"}
hist_data <- read.csv("../data/hist_illustration.csv") %>%
  mutate(y = runif(1000, 0, 1.45))
jitter_plot <- ggplot(hist_data, aes(x = x, y = y)) + 
  geom_point(alpha = .15, size = 2, fill = "#6794A7", color = "#014D64", height = .5, width = 0) + 
  scale_x_continuous(name = "Variable 3", limits = c(-1.1775, 10.4925), breaks = seq(0, 10, 2.5)) +
  scale_y_continuous(name = "", limits = c(0, 1.6)) + 
  theme_minimal(base_size = 16) + theme(axis.text.y = element_blank())
jitter_plot
```

---


## Distributions

We can divide the domain of this variable into 5 bins

```{r, echo = F, fig.width = 12, fig.height = 5, dpi=300, out.width = "78%"}
jitter_plot +
  geom_vline(xintercept = c(1.160, 3.49, 5.825, 8.160), linetype = "dashed") +
  annotate("text", x = -.5, y = 1.55, label = "Bin 1", size = 6, color = "#505050") +
  annotate("text", x = 1.6, y = 1.55, label = "Bin 2", size = 6, color = "#505050") +
  annotate("text", x = 4, y = 1.55, label = "Bin 3", size = 6, color = "#505050") +
  annotate("text", x = 6.25, y = 1.55, label = "Bin 4", size = 6, color = "#505050") +
  annotate("text", x = 8.6, y = 1.55, label = "Bin 5", size = 6, color = "#505050")
```

---

## Distributions

And count the number of observations within each bin

```{r, echo = F, fig.width = 12, fig.height = 5, dpi=300, out.width = "78%"}
jitter_plot +
  geom_vline(xintercept = c(1.160, 3.49, 5.825, 8.160), linetype = "dashed") +
  annotate("text", x = -.35, y = 1.55, label = "Bin 1: 8", size = 6, color = "#505050") +
  annotate("text", x = 1.9, y = 1.55, label = "Bin 2: 145", size = 6, color = "#505050") +
  annotate("text", x = 4.31, y = 1.55, label = "Bin 3: 528", size = 6, color = "#505050") +
  annotate("text", x = 6.55, y = 1.55, label = "Bin 4: 300", size = 6, color = "#505050") +
  annotate("text", x = 8.815, y = 1.55, label = "Bin 5: 19", size = 6, color = "#505050")
```

---

## Distributions

If we plot the count per bin, we get a **histogram**

```{r, echo = F, fig.width = 12, fig.height = 5, dpi=300, out.width = "78%"}
ggplot(hist_data, aes(x = x)) +
  geom_histogram(fill = "#6794A7", color = "#014D64", alpha = .8, bins = 5) + 
  geom_vline(xintercept = c(1.160, 3.49, 5.825, 8.160), linetype = "dashed") + 
  xlab("Variable 3") + theme_minimal(base_size = 16) 
```

---

## Distributions

There's no definitive rule to choose the number of bins. 

Too few can be misleading, too many can be impractical for visualizing.

```{r, echo = F, fig.width = 12, fig.height = 4, dpi=300, out.width = "83%"}
myhist <- function(b) {
  ggplot(hist_data, aes(x = x)) + 
    geom_histogram(fill = "#6794A7", color = "#014D64", alpha = .8, bins = b) +
    ylab("") + xlab("") + ggtitle(paste(b, "bins")) + theme_minimal(base_size = 14)
}
ggarrange(myhist(5), myhist(50), myhist(500), ncol = 3)
```

---

## Distributions

- Oftentimes, instead of histograms, density plots are used. 
  - Both are based on the same principle: grouping data points. 
  - But densities are continuous
  
::::: columns

::: column
  
```{r, echo = F}
ggplot(hist_data, aes(x = x)) +
  geom_histogram(fill = "#6794A7", color = "#014D64", alpha = .8, bins = 5) + 
  geom_vline(xintercept = c(1.160, 3.49, 5.825, 8.160), linetype = "dashed") + 
  xlab("Variable 3") + theme_minimal(base_size = 16) 
```
:::

::: column
```{r echo=FALSE}
ggplot(hist_data, aes(x = x)) +
  geom_density(fill = "#6794A7", color = "#014D64", alpha = .8) +
    xlab("Variable 3") + theme_minimal(base_size = 14)
```
:::

::::

---

## Distributions

- You won't learn how to derive densities in this course
 - All you need to know: The <b>higher the value</b> on the y-axis, the <b>more observations</b> there are around the corresponding x location
 
- Like the histogram can have a varying number of bins, the density plot can vary in its **bandwidth**

```{r, echo = F, fig.width = 12, fig.height = 4, dpi=300, out.width = "83%"}
mydens <- function(b) {
  ggplot(hist_data, aes(x = x)) +
  geom_density(fill = "#6794A7", color = "#014D64", alpha = .8, bw = b) +
    ylab("") + xlab("") + ggtitle(paste("Bandwidth:", b)) + theme_minimal(base_size = 14)
}
ggarrange(mydens(.025), mydens(.25), mydens(2.5), ncol = 3)
```

---

How to summarize distributions with just a couple of numbers?

<br>
<br>

(you are probably impatient to hear the answer)

![](images/sheldon-cooper.jpg){width="500"}

---

How to summarize distributions with just a couple of numbers?

<br>
<br>

  - By describing their **central tendency** (e.g., mean, median)
  - And their **spread** (e.g., standard deviation, inter-quartile range)
  

# Central tendency

---

## Mean

The mean is the most common statistic to describe central tendencies. 


::::{.columns}

:::{.column style="font-size: smaller;"}

```{r}
#| echo: false
data <- read.csv("../data/distribution_data.csv")

data |> 
  select(V1) 
```
:::

:::{.column .fragment}

The mean is simply the sum of all the grades divided by the number of grades:

$$\bar{x} = \frac{1}{N}\sum_{i = 1}^Nx_i$$ 

In R, we just need to pass a vector/variable to the `mean()` function

```{r}
#| echo: true
# make a vector
variable <- c(1, 2, 4, 8, 12)

# calculate the mean
mean(variable)
```

:::
::::

---

## Median

To obtain the median you first need to sort the values.

::::{.columns}

:::{.column style="font-size: smaller;"}

```{r}
#| echo: false
data <- read.csv("../data/distribution_data.csv")

data |> 
  select(V1) |> 
  arrange(V1)
```
:::

:::{.column .fragment style="font-size: smaller;"}

The median is the value that **divides** the distribution into **two halves**

When there is an even number of observations, the median is the average of the last value of the first half and the first value of the second half


$$\text{Med}(x) = \begin{cases} x[\frac{N+1}{2}] & \text{if } N \text{ is odd}\\
\frac{x[\frac{N}{2}]+x[\frac{N}{2}+1]}{2} & \text{if } N \text{ is even}
\end{cases}$$

Here, since we have 30 observations, we take the average of the 15th and 16th value:

$$[\frac{6+6}{2}] = 6$$
:::
::::

---

## Median

To obtain the median you first need to sort the values.

::::{.columns}

:::{.column style="font-size: smaller;"}

```{r}
#| echo: false
data <- read.csv("../data/distribution_data.csv")

data |> 
  select(V1) |> 
  arrange(V1)
```
:::

:::{.column .fragment}

In R, we just need to pass a vector/variable to the `median()` function

```{r}
#| echo: true
# make a vector
variable <- c(1, 2, 4, 8, 12)

# calculate the mean
median(variable)
```
:::
::::

---

## Mean vs. Median

- Which of these two measures of central tendency you use will vary on the context. 

- Mostly, it will be the mean. 

---

## Mean vs. Median

- Note, however, that the mean is more sensitive to so called, "outliers". 

```{r}
set.seed(123)

library(patchwork)  # For combining plots

# Generate two datasets: one with an outlier, one without
data_normal <- data.frame(values = rnorm(30, mean = 50, sd = 10))
data_outlier <- data_normal
data_outlier$values[30] <- 150  # Add an extreme outlier

# Compute mean and median for both datasets
mean_normal <- mean(data_normal$values)
median_normal <- median(data_normal$values)
mean_outlier <- mean(data_outlier$values)
median_outlier <- median(data_outlier$values)

# Define bin width and limits
binwidth <- 5
x_limits <- c(20, 160)  # Ensure the outlier is included

# Create histogram without outlier
p1 <- ggplot(data_normal, aes(x = values)) +
  geom_histogram(binwidth = binwidth, fill = "#6794A7", color = "#014D64", alpha = .8) +
  geom_vline(xintercept = mean_normal, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = median_normal, color = "blue", linetype = "dotted", linewidth = 1) +
  labs(title = "Without Outlier",
       subtitle = "Mean (red) and Median (blue) are close",
       x = "Value", y = "Count") +
  theme_minimal() +
  annotate("text", x = mean_normal + 10, y = 8, label = "Mean", color = "red") +
  annotate("text", x = median_normal - 10, y = 6, label = "Median", color = "blue") +
  xlim(x_limits)

# Create histogram with outlier
p2 <- ggplot(data_outlier, aes(x = values)) +
  geom_histogram(binwidth = binwidth, fill = "#6794A7", color = "#014D64", alpha = .8) +
  geom_vline(xintercept = mean_outlier, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = median_outlier, color = "blue", linetype = "dotted", linewidth = 1) +
  labs(title = "With Outlier",
       subtitle = "Mean is pulled to the right",
       x = "Value", y = "Count") +
  theme_minimal() +
  annotate("text", x = mean_outlier + 10, y = 8, label = "Mean", color = "red") +
  annotate("text", x = median_outlier - 10, y = 6, label = "Median", color = "blue") +
  xlim(x_limits)

# Combine plots
p1 + p2

```

---

## Mean vs. Median in R


::: callout-tip
## Watch out for NAs

Use the `na.rm` argument and set it to `TRUE` to remove NAs

```{r}
mean(c(1, 2, 3, 4, NA))
mean(c(1, 2, 3, 4, NA), na.rm = T)
```

:::

# Spread

---

We do not only want to now the center of the distribution (mean, median), but also:

<br> 

How wide is the distribution? 

---

All these have the same mean, but they look quite different. 

```{r}
set.seed(123)

# Generate data with increasing standard deviations
data <- data.frame(
  value = c(rnorm(1000, mean = 50, sd = 2),   # Very little variation
            rnorm(1000, mean = 50, sd = 5),   # A little more variation
            rnorm(1000, mean = 50, sd = 10),  # Even more variation
            rnorm(1000, mean = 50, sd = 20)), # Lots of variation
  group = factor(rep(c("Very Little", "Little More", "Even More", "Lots"), each = 1000), 
                 levels = c("Very Little", "Little More", "Even More", "Lots"))  # Explicit order
)

# Create density plots
p <- ggplot(data, aes(x = value)) +
  geom_density(fill = "#6794A7", color = "#014D64", alpha = .8) +
  facet_wrap(~ group) +
  theme_minimal() +
  labs(title = "Distributions with different variation...",
       x = "Some value", y = "Density")

# Display the plot
p

```

---

## Range, quantiles, and the IQR

One simple way to quantify spread is by calculating the *range*

```{r}
#| echo: true
distribution <- c(-3, -2, -1, 0, 1, 2, 3)
```

What would be the range ? 

. . . 

```{r}
#| echo: true
max(distribution) - min(distribution)
```

. . . 

However, with outliers, the range is sometimes not ideal. 

---

## Range, quantiles, and the IQR

An alternative are *quantiles* 

  - The <b>median</b> divides the population into <b>2 groups</b> of equal size
  - Quartiles</b> divide the population into <b>4 groups</b> of equal size
  - There are also <b>terciles</b>, <b>quintiles</b>, <b>deciles</b>, and so on

. . . 
  
One way to <b>compute quartiles</b>: divide the ordered variable according to the median

  - The lower quartile value is the median of the lower half of the data
  - The upper quartile value is the median of the upper half of the data
  - If there is an odd number of data points in the original ordered data set, don't include the median in either half
  
. . . 

::::{.columns}

:::{.column}

```{r, echo = F}
kable(t(tibble(` ` = c(-3, -2, -1, 0, 1, 2, 3))), caption = "")
```

$$Q_1 = -2,\:\:Q_2 = 0,\:\:Q_3 = 2$$
:::

:::{.column}

```{r, echo = F}
kable(t(tibble(` ` = c(-3, -2, -1, 0, 0, 1, 2, 3))), caption = "")
```

$$Q_1 = -1.5,\:\:Q_2 = 0,\:\:Q_3 = 1.5$$

:::

::::

---

## Range, quantiles, and the IQR

The **interquartile range** is the difference between the third and the first quartile: 

$\text{IQR} = Q_3 - Q_1$

In other words, it corresponds to the **bounds** of the set which contains the **middle half** of the distribution

---

## Variance and standard deviation

The <b>variance</b> is a way to quantify how the values of a variable tend to <b>deviate</b> from their <b>mean</b>

  - If values tend to be <b>close to the mean</b>, then the <b>spread is low</b>
  - If values tend to be far <b>from the mean</b>, then the <b>spread is large</b>

. . . 

::::{.columns}

:::{.column}

Can we just take the **average deviation** from the mean?

```{r, echo = F}
kable(tibble(x = c(1, 4, -3, 8), `mean(x)` = mean(c(1, 4, -3, 8)),
             `x - mean(x)` = c(1, 4, -3, 8) - mean(c(1, 4, -3, 8))), 
      caption = "", align = "ccc")
```

:::

:::{.column .fragment}

By construction it would **always be 0**: values above and under the mean compensate
 
  - But we can use the **absolute value** of each deviation: $|x_i-\bar{x}|$
  - Or their **square**: $(x_i-\bar{x})^2$

:::

::::

---

## Variance and standard deviation

This is how the **variance** is computed: by **averaging the squared deviations from the mean**


$$\text{Var}(x) = \frac{1}{N}\sum_{i = 1}^N(x_i-\bar{x})^2$$

<br>

. . .

- Because the **variance** is a **sum of squares**, it can get **quite big** compared to the other statistics like the mean, the median or the interquartile range.

- To express the spread in the **same unit** as the data, we can take the **square root** of the variance, which is called the **standard deviation**    

. . .

$$\text{SD}(x) = \sqrt{\text{Var}(x)} = \sqrt{\frac{1}{N}\sum_{i = 1}^N(x_i-\bar{x})^2}$$

---

## Computing spread in R

Interquartile range (IQR)

```{r}
#| echo: true
variable <- c(0, 1, 3, 4, 6, 7, 8, 10, 11)
IQR(variable)
```

Standard deviation (sd)

```{r}
#| echo: true
sd(variable)
```

. . . 

You can obtain the **quantiles** of a variable using the `quantile()` function (the default are quartiles)

```{r}
#| echo: true
quantile(variable)
```

---

## That's it for today :)