---
title: "Data visualization"
format: 
  revealjs:
    theme: simple
    smaller: true
    slide-number: true
    # incremental: true
    # code-link: true
    chalkboard: true
    history: false
---

```{r}
library(tidyverse)
library(kableExtra)
```

## Overview

::::: columns
::: {.column style="font-size: smaller;"}
1.  **The `ggplot` function**

2.  **Mapping data to aesthetics**

3.  **Different geoms**

4.  **Scales**

:::

::: {.column style="font-size: smaller;"}
5.  **Facets**

6.  **Coordinates**

7.  **Themes**
:::
:::::

# The `ggplot` function

---

::::::: columns
:::: {.column width="50%"}
::: r-stack
`tidyverse`{.fragment .fade-out fragment-index="1"}

`ggplot`{.fragment .fade-in fragment-index="1"}
:::
::::

:::: {.column width="50%"}
::: r-stack
![](images/tidyverse.png){.fragment .semi-fade-out width="500" fragment-index="1"}

![](images/ggplot.png){.fragment .fade-in .absolute fragment-index="1" width="200" top="40" right="250"}
:::
::::
:::::::

---

## The `ggplot()` function

::::::: columns
:::: {.column width="70%"}

`ggplot()` from the `ggplot2` package is what we're gonna use for all our plots

It takes the following core arguments:

```{r}
#| echo: true
#| eval: false
#| error: false
ggplot(data, aes()) + geometry + other_stuff
```

- **Data**: the values to plot
- **Mapping** (aes, for aesthetics): the structure of the plot
- **Geometry**: the type of plot

:::{.fragment}
You can also use a pipe

```{r}
#| echo: true
#| eval: false
#| error: false

data |> 
ggplot(aes()) + geometry + other_stuff
```
:::

::::

:::: {.column width="30%"}

![](images/ggplot.png){width="300"}
::::
:::::::

---

## The `ggplot()` function

Take for instance the gapminder data you've previously installed.

```{r}
#| echo: true
#| code-overflow: wrap
library(gapminder)

# The data() function in R is used to list, load, 
# and access built-in or package-provided datasets. 
data(gapminder) 
```

Let's get a quick overview of the data again.

```{r}
#| echo: true
#| eval: true
head(gapminder)
```

---

## What's the relationship between life expectancy and GDP per capita?

<br>

<br>

... we expect of course that higher GDP per capita leads to greater life expactancy.

---

## What's the relationship between life expectancy and GDP per capita?

::::::: columns
:::: {.column width="30%"}

- We first assign the gapminder data to `ggplot()`

- The result is just an empty plot

::::

:::: {.column width="70%"}

```{r}
#| echo: true
#| eval: true
#| #| code-line-numbers: "|3|5|8|10"
ggplot(data = gapminder)
```

::::
:::::::

---

## What's the relationship between life expectancy and GDP per capita?

::::::: columns
:::: {.column width="30%"}

- Next, we map out the plot by adding the x and y axes

::::

:::: {.column width="70%"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2"
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp))
```

::::
:::::::

---

## What's the relationship between life expectancy and GDP per capita?

::::::: columns
:::: {.column width="30%"}

- We then define how we want to plot our data
- In this case, let's go for the raw data points

::::

:::: {.column width="70%"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

::::
:::::::

---

## Mapping data to aesthetics

So far, only two variables appear in our plot (mapped onto the x and the y axis)

<br>

But we can add more variables to the plot, by assigning them to certain asthetics

---

## Mapping data to aesthetics

::::::: columns
:::: {.column width="30%"}

- For example, we can display the variable continent as colors

::::

:::: {.column width="70%"}

```{r}
#| echo: true
#| eval: true
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp)) +
  geom_point()
```

::::
:::::::

---

## Mapping data to aesthetics

::::::: columns
:::: {.column width="30%"}

- For example, we can display the variable continent as colors

- Note that a legend gets added automatically to the plot

::::

:::: {.column width="70%"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "2"
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) +
  geom_point()
```

::::
:::::::

---

## Mapping data to aesthetics

::::::: columns
:::: {.column width="30%"}

- We could further display population size by mapping it to the size aesthetic 

::::

:::: {.column width="70%"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3"
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point()
```

::::
:::::::

---

## Grammatical Layers

::::::: columns
:::: {.column width="50%"}

So far we know about data, aesthetics, and geometries

<br>

Think of these components as **layers**

<br>

We add them to foundational `ggplot()` with `+`

::::

:::: {.column width="50%"}

![](images/ggplot-layers-short@4x.png)

::::
:::::::

---

## Possible aesthetics

::::::: columns
:::: {.column width="30%"}

`color` (discrete)

```{r aes-color-discrete, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
eg <- tribble(
  ~x, ~y, ~size, ~x1,
  "A", 1, 5, 1,
  "B", 1, 10, 2,
  "C", 1, 15, 3
)

# Color, discrete
ggplot(eg, aes(x = x, y = y, color = x)) +
  geom_point(size = 30) +
  guides(color = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

`color` (continuous)

```{r aes-color-continuous, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Color, continuous
ggplot(eg, aes(x = x1, y = y, color = x1)) +
  geom_point(size = 30) +
  guides(color = "none") +
  coord_cartesian(xlim = c(0.5, 3.5)) +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

::::

:::: {.column width="30%"}

`size`

```{r aes-size, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Size
ggplot(eg, aes(x = x, y = y, size = x)) +
  geom_point() +
  scale_size_discrete(range = c(2, 30)) +
  guides(size = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

`fill`

```{r aes-fill, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Fill
ggplot(eg, aes(x = x, y = y, fill = x)) +
  geom_point(size = 30, pch = 21, stroke = 5) +
  guides(fill = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

::::

:::: {.column width="30%"}

`shape`

```{r aes-shape, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Shape
ggplot(eg, aes(x = x, y = y, shape = x)) +
  geom_point(size = 30) +
  guides(shape = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

`alpha`

```{r aes-alpha, echo=FALSE, fig.dim=c(4, 2), out.width="100%"}
# Alpha
ggplot(eg, aes(x = x, y = y, alpha = x)) +
  geom_point(size = 30) +
  guides(alpha = "none") +
  theme(axis.text.y = element_blank(),
        axis.ticks = element_blank())
```

::::
:::::::

---

## Possible geoms

<table>
  <tr>
    <th class="cell-left"></th>
    <th class="cell-left">Example geom</th>
    <th class="cell-left">What it makes</th>
  </tr>
  <tr>
    <td class="cell-left"><img src="images/geom_bar.png"></td>
    <td class="cell-left"><code class="remark-inline-code">geom_col()</code></td>
    <td class="cell-left">Bar charts</td>
  </tr>
  <tr>
    <td class="cell-left"><img src="images/geom_text.png"></td>
    <td class="cell-left"><code class="remark-inline-code">geom_text()</code></td>
    <td class="cell-left">Text</td>
  </tr>
  <tr>
    <td class="cell-left"><img src="images/geom_point.png"></td>
    <td class="cell-left"><code class="remark-inline-code">geom_point()</code></td>
    <td class="cell-left">Points</td>
  </tr>
  <tr>
    <td class="cell-left"><img src="images/geom_boxplot.png"></td>
    <td class="cell-left"><code class="remark-inline-code">geom_boxplot()</code>&emsp;</td>
    <td class="cell-left">Boxplots</td>
  </tr>
  <tr>
    <td class="cell-left"><img src="images/geom_sf.png"></td>
    <td class="cell-left"><code class="remark-inline-code">geom_sf()</code></td>
    <td class="cell-left">Maps</td>
  </tr>
</table>

---

## Possible geoms

There are dozens of possible geoms and<br>each class session will cover different ones.

<br>

See [the {ggplot2} documentation](https://ggplot2.tidyverse.org/reference/index.html#section-layer-geoms) for complete examples of all the different geom layers

---

## Additional Layers

::::::: columns
:::: {.column width="40%"}

There are many of other grammatical layers we can use to describe graphs!

We sequentially add layers onto the foundational `ggplot()` plot to create complex figures

::::

:::: {.column width="60%"}

![](images/ggplot-layers@4x.png)

::::
:::::::

---

## Scales

Scales change how variables are mapped

<table>
  <tr>
    <th class="cell-left">Example layer</th>
    <th class="cell-left">What it does</th>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">scale_x_continuous()</code></td>
    <td class="cell-left">Make the x-axis continuous</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">scale_x_continuous(breaks = 1:5)&ensp;</code></td>
    <td class="cell-left">Manually specify axis ticks</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">scale_x_log10()</code></td>
    <td class="cell-left">Log the x-axis</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">scale_color_gradient()</code></td>
    <td class="cell-left">Use a gradient</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">scale_fill_viridis_d()</code></td>
    <td class="cell-left">Fill with discrete viridis colors</td>
  </tr>
</table>

---

## Scales

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point()
```

---

## Scales

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "5"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10()
```

---

## Scales

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "6"
#| output-location: column
#| column: screen-inset
#| output-width: 150%
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d()
```

---

## Facets

Facets show subplots for different subsets of data

<table>
  <tr>
    <th class="cell-left">Example layer</th>
    <th class="cell-left">What it does</th>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">facet_wrap(vars(continent))</code></td>
    <td class="cell-left">Plot for each continent</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">facet_wrap(vars(continent, year))</code>&emsp;</td>
    <td class="cell-left">Plot for each continent/year</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">facet_wrap(..., ncol = 1)</code></td>
    <td class="cell-left">Put all facets in one column</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">facet_wrap(..., nrow = 1)</code></td>
    <td class="cell-left">Put all facets in one row</td>
  </tr>
</table>

---

## Facets

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() 
```

---

## Facets

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "7"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  facet_wrap(vars(continent))
```

---

## Facets

::::::: columns
:::: {.column width="40%"}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2,9"
ggplot(data = gapminder |> 
         filter(year %in% c(2002, 2007)), 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  facet_wrap(vars(continent, 
                  year), nrow = 2)
```

::::

:::: {.column width="60%"}

```{r}
#| echo: false
#| eval: true
#| output-location: column
ggplot(data = gapminder |> 
         filter(year %in% c(2002, 2007)), 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  facet_wrap(vars(continent, 
                  year), nrow = 2)
```

::::
:::::::

---

## Coordinates 

Change the coordinate system

<table>
  <tr>
    <th class="cell-left">Example layer</th>
    <th class="cell-left">What it does</th>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">coord_cartesian()</code></td>
    <td class="cell-left">Plot for each continent</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">coord_cartesian(ylim = c(1, 10))</code>&emsp;</td>
    <td class="cell-left">Zoom in where y is 1–10</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">coord_flip()</code></td>
    <td class="cell-left">Switch x and y</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">coord_polar()</code></td>
    <td class="cell-left">Use circular polar system</td>
  </tr>
</table>

---

## Coordinates

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() 
```

---

## Coordinates

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "7,8"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  coord_cartesian(ylim = c(70, 80), 
                  xlim = c(10000, 30000))
```

---

## Coordinates

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "7"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() + 
  coord_flip()
```

---

## Labels

Add labels to the plot with a single `labs()` layer

<table>
  <tr>
    <th class="cell-left">Example layer</th>
    <th class="cell-left">What it does</th>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">labs(title = "Neat title")</code></td>
    <td class="cell-left">Title</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">labs(caption = "Something")</td>
    <td class="cell-left">Caption</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">labs(y = "Something")</td>
    <td class="cell-left">y-axis</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">labs(size = "Population")</code></td>
    <td class="cell-left">Title of size legend</td>
  </tr>
</table>

---

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() 
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "7"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "8"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "10"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "11"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "12"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "13"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population",
       caption = "Source: The Gapminder Project")
```

---

## Theme

Change the appearance of anything in the plot

There are many built-in themes

<table>
  <tr>
    <th class="cell-left">Example layer</th>
    <th class="cell-left">What it does</th>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">theme_grey()</code></td>
    <td class="cell-left">Default grey background</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">theme_bw()</td>
    <td class="cell-left">Black and white</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">theme_dark()</td>
    <td class="cell-left">Dark</td>
  </tr>
  <tr>
    <td class="cell-left"><code class="remark-inline-code">theme_minimal()</code></td>
    <td class="cell-left">Minimal</td>
  </tr>
</table>

---

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population",
       caption = "Source: The Gapminder Project")
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "14"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population",
       caption = "Source: The Gapminder Project") +
  theme_dark()
```

---

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "14"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population",
       caption = "Source: The Gapminder Project") +
  theme_minimal()
```

---

## Theme

There are collections of pre-built themes online,<br>like [the {ggthemes} package](https://jrnold.github.io/ggthemes/)

![](images/ggthemes.png)

---

## Theme

Organizations often make their own custom themes, [like the BBC](https://bbc.github.io/rcookbook/)

![](images/bbc-cookbook.png)

---

## Theme options

Make theme adjustments with `theme()`

There are a billion options here!

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population",
       caption = "Source: The Gapminder Project") +
  theme_minimal()
```

---

## Theme options

Make theme adjustments with `theme()`

There are a billion options here!

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "13-17"
#| output-location: column
ggplot(data = gapminder, 
       mapping = aes(x = gdpPercap, y = lifeExp, color = continent, 
                     size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_viridis_d() +
  labs(title = "Health and wealth grow together",
       subtitle = "Data from the world",
       x = "Wealth (GDP per capita)",
       y = "Health (life expectancy)",
       color = "Continent",
       size = "Population",
       caption = "Source: The Gapminder Project") +
  theme_minimal() +
  theme(legend.position = "top",
        plot.title = element_text(face = "bold"),
        axis.title.y = element_text(face = "italic"))
```

---

## There are many, many more options

::::::: columns
:::: {.column width="40%"}

See [the {ggplot2} documentation](https://ggplot2.tidyverse.org/reference/index.html) for complete examples of everything you can do

::::

:::: {.column width="60%"}

![](images/ggplot-layers@4x.png)

::::
:::::::

---

## Your turn #1: untidy temperatures 

Take this [tibble](https://tibble.tidyverse.org/){target="_blank"} (very similar to a `data.frame`) of temperature recordings at three stations on three dates:

```{r}
#| eval: true
#| echo: true

temp_data_untidy <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)
```

Imagine our goal is to track temperature across time.

---

## Your turn #1: untidy temperatures 

1. What makes this data untidy? Describe.

2. Make a new data frame called `temp_data_tidy`. Use `pivot_longer()` to tidy the data and create a new `temperature` and `station` variable. 

3. Make a plot that tracks the temperature changes over time for `station1` only. Use `filter()` to select the station and use `mutate()` in combination with the `as_date()` function to convert the date variable from character to a date format. into a date. Use `geom_line` for the plot. 

4. Now use the the non-filtered data frame with all stations. Add another aesthetic layer to your previous plot, so that your new plot allows to differentiate temperature changes between the different stations. Tip: Use `color`

```{r}
countdown::countdown(
  minutes = 6,
  top = 0, 
  right = 0,
  # Fanfare when it's over
  play_sound = FALSE,
  color_border              = "#FFFFFF",
  color_text                = "#7aa81e",
  color_running_background  = "#7aa81e",
  color_running_text        = "#FFFFFF",
  color_finished_background = "#ffa07a",
  color_finished_text       = "#FFFFFF",
  font_size = "1em",
  start_immediately = TRUE
  )
```

---

## Your turn #1: untidy temperatures 

1.&nbsp; What makes this data untidy? Describe.

:::: columns

::: column
![](images/tidy-1.png){width="800"}

1.  Variables are columns
2.  Observations are rows
3.  Values are cells
:::

::: column

```{r}
#| eval: true
#| echo: false

temp_data_untidy  |> 
  kableExtra::kable()
```

::: fragment
**Multiple observations (temperature recordings) per row**
:::

:::

::::

---

## Your turn #1: untidy temperatures 

2. Make a new data frame called `temp_data_tidy`. Use `pivot_longer()` to tidy the data and create a new `temperature` and `station` variable. 

```{r}
#| eval: true
#| echo: true
temp_data_tidy <- temp_data_untidy |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station",
               values_to = "temperature")
```

```{r}
temp_data_tidy |> 
  kableExtra::kable()
```

---

## Your turn #1: untidy temperatures 

3. Make a plot that tracks the temperature changes over time for `station1` only. Use `filter()` to select the station and use `mutate()` in combination with the `as_date()` function to convert the date variable from character to a date format. into a date. Use `geom_line` for the plot. 

```{r}
#| eval: true
#| echo: true
temp_data_tidy |> 
  filter(station == "station1") |> 
  mutate(date = as_date(date)) |> 
  ggplot(aes(x = date, y = temperature)) +
  geom_line()
```

---

## Your turn #1: untidy temperatures 

4. Now use the the non-filtered data frame with all stations. Add another aesthetic layer to your previous plot, so that your new plot allows to differentiate temperature changes between the different stations. Tip: Use `color`

```{r}
#| eval: true
#| echo: true
temp_data_tidy |> 
  mutate(date = as_date(date)) |> 
  ggplot(aes(x = date, y = temperature, color = station)) +
  geom_line()
```

---

## That's it for today :)



