{
  "hash": "7fd60766ef0a6e334c1c20edcb3cb3a2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Linear Regression\"\nformat: \n  revealjs:\n    theme: simple\n    smaller: true\n    slide-number: true\n    # incremental: true\n    # code-link: true\n    chalkboard: true\n    history: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Overview\n\n::::: columns\n::: {.column style=\"font-size: smaller;\"}\n1.  **Drawing Lines**\n\n2. **Running a regression in R**\n\n3.  **Statistical Inference for Regression**\n\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n\n:::\n:::::\n\n# Drawing Lines\n\n---\n\n## Essential parts of regression \n\n::::: columns\n::: {.column}\n**Y**\n\n<br>\n\n\"Outcome\"/\"Dependent\"/\"Response\" variable\n\n<br>\n\nThing you want to explain or predict\n\n:::\n\n::: {.column}\n**X**\n\n<br>\n\n\"Explanatory\"/\"Independent\"/\"Predictor\" variable\n\n<br>\n\nThing you use to explain or predict Y\n:::\n\n:::::\n\n---\n\n## For example, **Does eating cookies make people happier?**\n\n---\n\n## Cookies and happiness\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-base-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n### How to do regression?\n\n1. Plot X and Y\n\n<br>\n\n2. Draw a line that approximates the relationship\n\n<br>\n\n3. Find out the slope and intercept of the line\n\n---\n\n## How good is the fit? \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-bad-slope-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## How good is the fit? \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-bad-intercept-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## How good is the fit? \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-lm-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## Residuals\n\nWe don't need to rely on our visual intuition. We can calculate how well the line fits our data. \n\n. . .\n\n<br>\n\n**Residual = difference between the observed and predicted values of the dependent variable**\n\n(i.e. distance of a data point to the line, for a given value of X)\n\n. . .\n\n<br> \n\nFor example, if someone who ate 5 cookies reported a happiness level of 2.5, but the regression predicts 2.0, the residual is:\n\n$2.5−2.0=0.5$\n\n---\n\n## Ordinary Least Squares (OLS)\n\n<br>\n\nGoal of regression: minimize residuals\n\n. . . \n\nA (not so good solution): Take the sum of all residuals\n\n  - some residuals are negative, some are positive, they will cancel out\n  \n. . .\n  \nA better solution: Square all residuals, then sum them\n\n  - this is a strategy we've already seen for calculating standard deviations. \n  \n. . .\n\n::: {.callout-tip}\n## Why not just use absolute values?\n\nIt is mathematically a lot easier to find the minimum of squared sums. \n:::\n\n---\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-bad-slope-residuals-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-bad-intercept-residuals-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/cookies-lm-residuals-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## Linear regression estimates\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/highlight-slope-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## Linear regression estimates\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/baseline-regression-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## Linear regression estimates\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/highlight-slope-intercept-1.png){width=100%}\n:::\n:::\n\n\n\n---\n\n## Interpreting linear regression output\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\"A one unit increase in X is associated with a beta 1 increase (or decrease) in Y, on average.\"\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the OLS regression model\nlm(happiness ~ cookies, data = cookies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = happiness ~ cookies, data = cookies)\n\nCoefficients:\n(Intercept)      cookies  \n     1.1000       0.1636  \n```\n\n\n:::\n:::\n\n\n:::\n\n:::\n\n:::::\n\n---\n\n## Interpreting linear regression output\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\"A one unit increase in X is associated with a beta 1 increase (or decrease) in Y, on average.\"\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\nWe get some more detail doing this: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the OLS regression model\nols_model <- lm(happiness ~ cookies, data = cookies)\n\nsummary(ols_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = happiness ~ cookies, data = cookies)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.76364 -0.57955 -0.07727  0.49545  1.08182 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)  1.10000    0.47025   2.339   0.0475 *\ncookies      0.16364    0.07579   2.159   0.0629 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6884 on 8 degrees of freedom\nMultiple R-squared:  0.3682,\tAdjusted R-squared:  0.2892 \nF-statistic: 4.662 on 1 and 8 DF,  p-value: 0.06287\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::::\n\n---\n\n## Interpreting linear regression output\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\"A one unit increase in X is associated with a beta 1 increase (or decrease) in Y, on average.\"\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\nWe can also store the output in a data frame directly using the `broom` package. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\n\ntidy(ols_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept)    1.1      0.470       2.34  0.0475\n2 cookies        0.164    0.0758      2.16  0.0629\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::::\n\n# Statistical Inference for Linear Regression\n\n---\n\n## How does hypothesis testing work for linear regression? \n\n- Everything we've learned so far on hypothesis testing and statistical power also applies to linear regression\n\n- In the last two sessions, our estimate was the difference between comedies and action movies. \n\n- This time, our estimate is the slope of the regression.\n\n---\n\n## Simulate a cookies and happiness population\n\nLet's simulate a true effect world of cookie data with. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234) # For reproducibility\n\n# true happiness without any cookies\nintercept <- 1\n\n# effect of one cookie on happiness\nslope <- 0.3\n\nimaginary_cookies <- tibble(\n  id = 1:1000000,\n  cookies = sample(seq(1, 10, by = 1), size = 1000000, replace = TRUE),\n  # the rnorm() function adds noise, i.e. some random error\n  happiness = intercept + slope * cookies + rnorm(length(cookies), mean = 0, sd = 0.5)\n)\n```\n:::\n\n\n\n--- \n\n## Generate a sampling distribution\n\nImagine we can ask a sample of 10 people on how happy they are and how many cookies they eat a day - let's draw many (1000) samples of 10 people and calculate a regression for each. \n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_simulations <- 1000\nregression_estimates <- c() # make an empty vector\nsample_size <- 10\n\nfor (i in 1:n_simulations) {\n  # draw a sample of 10 people\n  imaginary_sample <- imaginary_cookies |> \n    sample_n(sample_size)\n  \n  # run a regression on the sample \n  estimate <- lm(happiness ~ cookies, data = imaginary_sample) |> \n    tidy() |> \n    filter(term == \"cookies\") |> \n    pull(estimate)\n\n  regression_estimates [i] <- estimate\n}\n```\n:::\n\n\n\n---\n\n## According to the Central Limit Theorem, what do we expect the sampling distribution to look like?\n\n---\n\n## Sampling distribution\n\n1. The sampling distribution of estimates approximates a normal distribution.\n\n:::: r-stack\n\n:::{.fragment .fade-out fragment-index=\"1\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::{.fragment .fade-in fragment-index=\"3\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::: \n\n---\n\n## Sampling distribution\n\n2. The sampling distribution gets narrower with a larger sample size\n\n:::: r-stack\n\n:::{.fragment .fade-out fragment-index=\"1\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::{.fragment .fade-in fragment-index=\"1\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n::: \n\n::::\n\n---\n\n## Sampling distribution\n\n2. The sampling distribution gets narrower with a larger sample size\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n---\n\n## Your turn: A power simulation for a regression analysis\n\nImagine we want to run a study to measure the association between cookies and happiness. \n\n<br>\n\nWe want to know how many participants we need to recruit to achieve a statistical power of 0.8, assuming an effect of 0.1. \n\n<br>\n\nThe final output should be a graph with the power for different sample sizes. \n\n::: {.callout-note}\nThis task is definitely a challenge. It's ok to get stuck. Make sure to use the guide on power simulation on the course website, and build on the functions on the next slides.\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_bb62d2e1\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn: A power simulation for a regression analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_sample <- function(sample_size){\n  \n  # set regression parameters\n  intercept <- 1\n  slope <- 0.1\n  \n  sample <- tibble(\n    id = 1: sample_size,\n    cookies = sample(seq(1, 10, by = 1), size = sample_size, replace = TRUE),\n    # the rnorm() function adds noise, i.e. some random error\n    happiness = intercept + slope * cookies + rnorm(length(cookies), mean = 0, sd = 1)\n  )\n  \n  return(sample)\n}\n\n# test\n# generate_sample(sample_size = 100)\n```\n:::\n\n\n\n---\n\n## Your turn: A power simulation for a regression analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_regression <- function(sample){\n  \n  # run a regression on the sample \n  p.value <- lm(happiness ~ cookies, data = sample) |> \n    tidy() |> \n    filter(term == \"cookies\") |> \n    pull(p.value)\n  \n  return(p.value)\n}\n\n# test\n# test_sample <- generate_sample(sample_size = 100)\n# calculate_regression(sample = test_sample)\n```\n:::\n\n\n\n---\n\n## Your turn: A power simulation for a regression analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_samples <- function(n_simulations, sample_size) {\n  \n  # Make an empty vector\n  p.values <- numeric(n_simulations)\n  \n  for (i in 1:n_simulations) {\n    # Draw a sample with the specified size\n    sample <- generate_sample(sample_size) \n    \n    # Get an estimate\n    p.values[i] <-  calculate_regression(sample)\n  }\n  \n  return(p.values)\n}\n# test\n# generate_samples(n_simulations = 100, sample_size = 10)\n```\n:::\n\n\n\n---\n\n## Solution \n\nFirst, we need a function to calculate power\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_power <- function(p.values){\n  \n  # get statistical power \n  power <- data.frame(p.values) |> \n    mutate(significant = ifelse(p.values <= 0.5, TRUE, FALSE)) |> \n    summarize(share_significant = sum(significant) / n()) |> \n    pull(share_significant)\n  \n  return(power)\n}\n# test\n# some_p.values <- generate_samples(n_simulations = 100, sample_size = 10)\n# calculate_power(p.values = some_p.values)\n```\n:::\n\n\n\n---\n\n## Solution \n\nWe can then put it all together in a power simulation function. This function generates 1000 samples, calculates the p-value for the analysis on each sample, and calculates the power.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower_simulation <- function(sample_size, n_simulations = 1000) {\n  \n  # Generate multiple samples and compute estimates\n  sampled_p.values <- generate_samples(n_simulations, sample_size)\n  \n  # Calculate statistical power\n  power <- calculate_power(sampled_p.values)\n  \n  # Return results\n  return(tibble(\n    sample_size = sample_size,\n    n_simulations = n_simulations,\n    estimated_power = power\n  ))\n}\n# test\n# power_simulation(sample_size = 30, n_simulations = 100)\n```\n:::\n\n\n\n---\n\n## Solution \n\nFinally we can use the function to run a power analysis for different sample sizes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_sizes <- c(10, 30, 50, 200)\n\n# make an empty data frame\npower_data <- tibble()\n\nfor (i in sample_sizes) {\n  # run power simulation\n  power <- power_simulation(sample_size = i, n_simulations = 1000)\n  \n  power_data <- bind_rows(power_data, power)\n}\n```\n:::\n\n\n\n---\n\n## Solution \n\nWe can then plot the power curve\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(power_data, \n       aes(x = sample_size, y = estimated_power)) +\n  geom_point(color = 'red', size = 1.5) +\n  geom_line(color = 'red', size = 1) + \n  # add a horizontal line at 80%\n  geom_hline(aes(yintercept = .8), linetype = 'dashed') + \n  # Prettify!\n  theme_minimal() + \n  scale_y_continuous(labels = scales::percent, limits = c(0,1)) + \n  labs(title = \"Power Simulation for the effect of Cookies on Happiness\",\n       x = 'Sample Size', y = 'Power')\n```\n\n::: {.cell-output-display}\n![](07-slides_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n---\n\nThat's it for today :)\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "07-slides_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}