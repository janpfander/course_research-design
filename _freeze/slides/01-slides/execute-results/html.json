{
  "hash": "2d07bf945dc538960ea4ebe44fd384f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R, RStudio and Quarto\"\nformat: \n  revealjs:\n    theme: simple\n    smaller: true\n    slide-number: true\n    # incremental: true\n    # code-link: true\n    chalkboard: true\n    history: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Overview\n\n::::: columns\n::: {.column style=\"font-size: smaller;\"}\n1.  **Getting Started**\n    -   About R\n    -   The R Studio IDE\n    -   Import and eyeball data\n2.  **Anatomy of a `data.frame`**\n    -   Data structure\n    -   Classes\n    -   Vectors\n    -   Subsetting\n3.  **Wrap Up**\n    -   Summary and key takeaways\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n4. **Markdown and universal writing** \n    - Office Model vs. Engineering Model\n    - Excel failures\n    - Markdown\n5.  **Writing reports in Quarto**\n    -   What is Quarto?\n    -   YAML header\n    -   Code chunks\n    -   Text formatting\n    -   Run and render your code\n    -   Inline code\n    -   Tables\n    -   Preset themes\n    -   Report parameters\n:::\n:::::\n\n# Getting Started\n\n------------------------------------------------------------------------\n\n## About R\n\n::::: columns\n::: {.column width=\"50%\"}\n-   R is a **programming language** and free software environment for **statistical computing and graphics**.\n\n-   The R language is widely (and increasingly) used in **academic and non-academic research** in fields like:\n\n    -   Economics\n    -   Statistics\n    -   Biostatistics\n:::\n\n::: {.column width=\"50%\"}\n![](images/rstudio_logo.png){width=\"300\"}\n:::\n:::::\n\n------------------------------------------------------------------------\n\n## The R Studio IDE\n\n![](images/rstudio.png)\n\n------------------------------------------------------------------------\n\n### The Console panel\n\n::::::: columns\n::::: {.column width=\"50%\"}\n:::: incremental\n-   This is where you **communicate with R**\n    -   You can write instructions after the **\\>**, **press enter**, and R will **execute**\n    -   Try with **1+1**:\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n::::\n:::::\n\n::: {.column width=\"50%\"}\n![](images/console.png){width=\"800\"}\n:::\n:::::::\n\n------------------------------------------------------------------------\n\n### The Source panel\n\n::::::: columns\n::::: {.column width=\"50%\"}\n:::: incremental\n-   This is where you **write and save your code** (File \\> New File \\> R Script)\n\n    -   **Separate** different commands with a **line break**\n    -   The **\\#** symbol allows you to **comment** your code\n    -   Everything after the **\\#** will be **ignored** by R until the next line break\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1 # Do not put 2+2 on the same line, press enter to go to next line \n2+2\n```\n:::\n\n\n:::\n::::\n:::::\n\n::: {.column width=\"50%\"}\n![](images/source.png){width=\"800\"}\n:::\n:::::::\n\n------------------------------------------------------------------------\n\n### The Source panel\n\n::::::: columns\n::::: {.column width=\"50%\"}\n:::: incremental\n::: fragment\n-   To send the command from the source panel to the console panel:\n    1.  **Click on/Highlight** the line(s) you want to execute\n    2.  Press **ctrl + enter**\n:::\n\n-   If you do not highlight anything the line of code where your cursor stands will be executed\n\n-   Check the console to see the output of your code\n::::\n:::::\n\n::: {.column width=\"50%\"}\n![](images/source.png){width=\"800\"}\n:::\n:::::::\n\n------------------------------------------------------------------------\n\n### The Environment panel\n\n::::::::: columns\n::::::: {.column width=\"50%\"}\n:::::: incremental\n-   Data analysis requires manipulating datasets, vectors, functions, etc.\n\n    -   These **elements are stored in the environment** panel.\n\n-   For instance, we can assign a value to an object using `<-`:\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\n```\n:::\n\n\n:::\n\n-   Now that the object `x` is stored in your environment, you can use it\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + 1 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n\n-   You can also modify that object at any point:\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- x + 1 \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n::::::\n:::::::\n\n::: {.column width=\"50%\"}\n![](images/environment.png){width=\"800\"}\n:::\n:::::::::\n\n------------------------------------------------------------------------\n\n### The Files/Plots/... panel\n\n:::::: columns\n:::: {.column width=\"50%\"}\n::: incremental\n-   In this panel, we'll mainly be interested in the following 4 tabs:\n\n    -   **Files:** Shows your working directory\n\n    -   **Plots:** Where R returns plots\n\n    -   **Packages:** A library of tools that we can load if needed\n\n    -   **Help:** Where to look for documentation on R functions\n:::\n::::\n\n::: {.column width=\"50%\"}\n![](images/plot.png){width=\"800\"}\n:::\n::::::\n\n------------------------------------------------------------------------\n\n### The Files/Plots/... panel\n\n:::::: columns\n::: {.column width=\"50%\"}\n-   Enter `?getwd()` in the console to see what a help file looks like:\n\n    -   It describes what the command does\n    -   It explains the different parameters of the command\n    -   It gives examples of how to use the command\n:::\n\n:::: {.column width=\"50%\"}\n::: {.fragment .fade-in}\n![](images/help_file.png){width=\"800\"}\n:::\n::::\n::::::\n\n------------------------------------------------------------------------\n\n### Practice\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_9d6f4e01\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n1.  Open a new R script (`Ctrl + Shift + N`) and write a code to create these objects:\n\n::: center\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>Objects to create</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Object name: </td>\n   <td style=\"text-align:center;\"> a </td>\n   <td style=\"text-align:center;\"> b </td>\n   <td style=\"text-align:center;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Assigned value: </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n2.  Run this code and create a new object named result that takes the value $\\frac{b\\times c}{a} + (b-a)^c$\n\n::: center\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Basic operations in R</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 3cm; font-weight: bold;\"> Operation: </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> Addition </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> Subtraction </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> Multiplication </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> Division </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> Exponentiation </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> Parentheses </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 3cm; font-weight: bold;\"> Symbol in R: </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> + </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> - </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> * </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> / </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> ^ </td>\n   <td style=\"text-align:center;width: 1.5cm; \"> () </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n3.  Print `result` in your console and save your script somewhere on your computer (Ctrl+S)\n\n------------------------------------------------------------------------\n\n### Solution\n\n1.  Open a new R script (`Ctrl + Shift + N`) and write a code to create these objects:\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Objects to create</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n   <th style=\"text-align:center;\">  </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Object name: </td>\n   <td style=\"text-align:center;\"> a </td>\n   <td style=\"text-align:center;\"> b </td>\n   <td style=\"text-align:center;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Assigned value: </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 2\nb <- 4\nc <- 5\n```\n:::\n\n\n:::\n:::::\n\n2.  Run this code and create a new object named result that takes the value $\\frac{b\\times c}{a} + (b-a)^c$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- b*c/a + (b-a)^c\n```\n:::\n\n\n\n3.  Print `result` in your console and save your script somewhere on your computer (Ctrl+S)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 42\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Import and Eyeball Data\n\n-   We now know how to **use R** as a calculator, but our goal is **to analyze data!**\n\n    -   Take for instance the statistics from the last season of Ligue 1 available at [fbref.com](https://fbref.com/en/comps/13/schedule/Ligue-1-Scores-and-Fixtures)\n\n::: center\n![](images/fbref_2024.png){width=\"800\"}\n:::\n\n------------------------------------------------------------------------\n\n## Import and Eyeball Data\n\n-   You can **download** the dataset for the 2021/22 season [by clicking here](https://louissirugue.github.io/metrics_on_R/lecture1/data.zip) or from the course webpage.\n    -   Note that the file extension is **.csv** (for **Comma Separated Values**).\n    -   Let's take a look at the **first 5 lines** of the raw `.csv` file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWk,Day,Date,Time,Home,xG,Score,xG,Away,Attendance,Venue,Referee,Match Report,Notes\n1,Fri,2021-08-06,21:00,Monaco,2.0,1–1,0.3,Nantes,7500,Stade Louis II.,Antony Gautier,Match Report,\n1,Sat,2021-08-07,17:00,Lyon,1.4,1–1,0.8,Brest,29018,Groupama Stadium,Mikael Lesage,Match Report,\n1,Sat,2021-08-07,21:00,Troyes,0.8,1–2,1.2,Paris S-G,15248,Stade de l'Aube,Amaury Delerue,Match Report,\n1,Sun,2021-08-08,13:00,Rennes,0.6,1–1,2.0,Lens,22567,Roazhon Park,Bastien Dechepy,Match Report,\n```\n:::\n\n\n\n. . .\n\n-   The .csv format is very common and follows a specific structure:\n\n    -   Each line corresponds to a row (the first row typically contains column names).\n    -   For each row, values of each column are separated by commas.\n\n-   *But how do we get it into our RStudio environment?*\n\n------------------------------------------------------------------------\n\n## Import and Eyeball Data\n\n-   To import stuff in R we use read functions\n    -   They take the file directory as an input\n    -   And give the file content as an output\n-   The read function dedicated to .csv files is `read.csv` (later we will mostly use `read_csv`)\n\n- Remember we use the arrow (`<-`) to create objects in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"/Users/jan/Downloads/ligue1.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n. . .\n\n::: callout-important\nMake sure you have the right path to your data file. Also, make sure you use correct backlashes \"/\". Do NOT use \"\\\\\".\n:::\n\n. . .\n\n-   Let's inspect this new object\n\n------------------------------------------------------------------------\n\n-   The first thing we can do is to use head() to print the *top rows*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Wk Day       Date  Time   Home  xG Score xG.1      Away Attendance\n1  1 Fri 2021-08-06 21:00 Monaco 2.0   1-1  0.3    Nantes       7500\n2  1 Sat 2021-08-07 17:00   Lyon 1.4   1-1  0.8     Brest      29018\n3  1 Sat 2021-08-07 21:00 Troyes 0.8   1-2  1.2 Paris S-G      15248\n             Venue        Referee Match.Report Notes\n1  Stade Louis II. Antony Gautier Match Report    NA\n2 Groupama Stadium  Mikael Lesage Match Report    NA\n3  Stade de l'Aube Amaury Delerue Match Report    NA\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n-   `tail()` would print the **bottom rows**\n\n-   We can also run **`View(`**`data)` *(a new tab will pop-up in your Source panel)*\n\n------------------------------------------------------------------------\n\n::: center\n![](images/view_fb.png){width=\"1000\"}\n:::\n\n::: center\nSeems like it worked!\n:::\n\n------------------------------------------------------------------------\n\n::: center\n![](images/view_fb_kinda.png){width=\"1000\"}\n:::\n\n::: center\nOr kind of worked...\n:::\n\n---\n\nThese kind of weird characters pop up when there is an encoding issue\n\n  - Thankfully, `read.csv()` has many options that can be set as inputs, including encoding!\n  - Usually the UTF-8 encoding is the solution to French characters\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"/Users/jan/Downloads/ligue1.csv\", encoding = \"UTF-8\")\n```\n:::\n\n\n\n. . . \n\nWhen you will be facing similar issues, check out the arguments of `read.csv()` by typing `?read.csv`\n\n::: center\n![](images/csv_help.png){width=\"1000\"}\n:::\n\n---\n\n## Overview\n\n:::::: columns\n::::: {.column width=\"50%\"}\n::: {.fragment .semi-fade-out}\n1.  **Getting Started**\n    -   About R\n    -   The R Studio IDE\n    -   Import and eyeball data\n:::\n\n::: {.fragment .fade-in}\n2.  **Anatomy of a `data.frame`**\n    -   Data structure\n    -   Classes\n    -   Vectors\n    -   Subsetting\n:::\n:::::\n::::::\n\n# Anatomy of a `data.frame`\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   Now that we imported the data properly, we can check out its **`str()`ucture** in more details\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   *Don't be scared of the output!*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t380 obs. of  14 variables:\n $ Wk          : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Day         : chr  \"Fri\" \"Sat\" \"Sat\" \"Sun\" ...\n $ Date        : chr  \"2021-08-06\" \"2021-08-07\" \"2021-08-07\" \"2021-08-08\" ...\n $ Time        : chr  \"21:00\" \"17:00\" \"21:00\" \"13:00\" ...\n $ Home        : chr  \"Monaco\" \"Lyon\" \"Troyes\" \"Rennes\" ...\n $ xG          : num  2 1.4 0.8 0.6 0.7 0.4 0.8 2.1 0.7 0.5 ...\n $ Score       : chr  \"1-1\" \"1-1\" \"1-2\" \"1-1\" ...\n $ xG.1        : num  0.3 0.8 1.2 2 3.3 0.9 0.2 1.3 1.4 2 ...\n $ Away        : chr  \"Nantes\" \"Brest\" \"Paris S-G\" \"Lens\" ...\n $ Attendance  : int  7500 29018 15248 22567 18748 23250 18030 20461 15551 13500 ...\n $ Venue       : chr  \"Stade Louis II.\" \"Groupama Stadium\" \"Stade de l'Aube\" \"Roazhon Park\" ...\n $ Referee     : chr  \"Antony Gautier\" \"Mikael Lesage\" \"Amaury Delerue\" \"Bastien Dechepy\" ...\n $ Match.Report: chr  \"Match Report\" \"Match Report\" \"Match Report\" \"Match Report\" ...\n $ Notes       : logi  NA NA NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   `str()` says that `data` is a `data.frame`, and gives its numbers of **observations** (rows) and **variables** (columns)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## 'data.frame':    380 obs. of  14 variables:\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   It also gives the **variables names**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## 'data.frame':    380 obs. of  14 variables:\n##  $ Wk          \n##  $ Day         \n##  $ Date        \n##  $ Time        \n##  $ Home        \n##  $ xG          \n##  $ Score       \n##  $ xG.1        \n##  $ Away        \n##  $ Attendance  \n##  $ Venue       \n##  $ Referee     \n##  $ Match.Report\n##  $ Notes  \n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   The **first values** of each variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## 'data.frame':    380 obs. of  14 variables:\n##  $ Wk          :      1 1 1 1 1 1 1 1 1 1 ...\n##  $ Day         :      \"Fri\" \"Sat\" \"Sat\" \"Sun\" ...\n##  $ Date        :      \"2021-08-06\" \"2021-08-07\" \"2021-08-07\" \"2021-08-08\" ...\n##  $ Time        :      \"21:00\" \"17:00\" \"21:00\" \"13:00\" ...\n##  $ Home        :      \"Monaco\" \"Lyon\" \"Troyes\" \"Rennes\" ...\n##  $ xG          :      2 1.4 0.8 0.6 0.7 0.4 0.8 2.1 0.7 0.5 ...\n##  $ Score       :      \"1–1\" \"1–1\" \"1–2\" \"1–1\" ...\n##  $ xG.1        :      0.3 0.8 1.2 2 3.3 0.9 0.2 1.3 1.4 2 ...\n##  $ Away        :      \"Nantes\" \"Brest\" \"Paris S-G\" \"Lens\" ...\n##  $ Attendance  :      7500 29018 15248 22567 18748 23250 18030 20461 15551 13500 ...\n##  $ Venue       :      \"Stade Louis II.\" \"Groupama Stadium\" \"Stade de l'Aube\" \"Roazhon Park\" ...\n##  $ Referee     :      \"Antony Gautier\" \"Mikael Lesage\" \"Amaury Delerue\" \"Bastien Dechepy\" ...\n##  $ Match.Report:      \"Match Report\" \"Match Report\" \"Match Report\" \"Match Report\" ...\n##  $ Notes       :       NA NA NA NA NA NA ...\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   As well as the **class** of each variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## 'data.frame':    380 obs. of  14 variables:\n##  $ Wk          : int  1 1 1 1 1 1 1 1 1 1 ...\n##  $ Day         : chr  \"Fri\" \"Sat\" \"Sat\" \"Sun\" ...\n##  $ Date        : chr  \"2021-08-06\" \"2021-08-07\" \"2021-08-07\" \"2021-08-08\" ...\n##  $ Time        : chr  \"21:00\" \"17:00\" \"21:00\" \"13:00\" ...\n##  $ Home        : chr  \"Monaco\" \"Lyon\" \"Troyes\" \"Rennes\" ...\n##  $ xG          : num  2 1.4 0.8 0.6 0.7 0.4 0.8 2.1 0.7 0.5 ...\n##  $ Score       : chr  \"1–1\" \"1–1\" \"1–2\" \"1–1\" ...\n##  $ xG.1        : num  0.3 0.8 1.2 2 3.3 0.9 0.2 1.3 1.4 2 ...\n##  $ Away        : chr  \"Nantes\" \"Brest\" \"Paris S-G\" \"Lens\" ...\n##  $ Attendance  : int  7500 29018 15248 22567 18748 23250 18030 20461 15551 13500 ...\n##  $ Venue       : chr  \"Stade Louis II.\" \"Groupama Stadium\" \"Stade de l'Aube\" \"Roazhon Park\" ...\n##  $ Referee     : chr  \"Antony Gautier\" \"Mikael Lesage\" \"Amaury Delerue\" \"Bastien Dechepy\" ...\n##  $ Match.Report: chr  \"Match Report\" \"Match Report\" \"Match Report\" \"Match Report\" ...\n##  $ Notes       : logi  NA NA NA NA NA NA ...\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Data Structure\n\n-   But what does the **class** correspond to?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## 'data.frame':    380 obs. of  14 variables:\n##  $ Wk          : int  ?\n##  $ Day         : chr  ?\n##  $ Date        : chr  ?\n##  $ Time        : chr  ?\n##  $ Home        : chr  ?\n##  $ xG          : num  ?\n##  $ Score       : chr  ?\n##  $ xG.1        : num  ?\n##  $ Away        : chr  ?\n##  $ Attendance  : int  ?\n##  $ Venue       : chr  ?\n##  $ Referee     : chr  ?\n##  $ Match.Report: chr  ?\n##  $ Notes       : logi  ?\n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Classes\n\n:::::: columns\n::: {.column width=\"33%\"}\n### Numeric\n\nThese are simply numbers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(-1.89278)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n-   Numeric variable classes include:\n    -   int for round numbers\n    -   dbl for 2-decimal numbers\n:::\n\n::: {.column .fragment width=\"33%\"}\n### Character\n\nThey must be surrounded by `\"` or `'`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"Paris Saint-Germain\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"35\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n-   We also call these values:\n    -   Character strings\n    -   Or just strings\n:::\n\n::: {.column .fragment width=\"33%\"}\n### Logical\n\nSomething either `TRUE` of `FALSE`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 >= 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(3 >= 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Operator </th>\n   <th style=\"text-align:left;\"> Meaning </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> == </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Equal to </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> &gt; </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Greater than </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> &lt; </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Less than </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> &gt;= </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Greater than or equal to </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> &lt;= </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Less than or equal to </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> &amp; </td>\n   <td style=\"text-align:left;font-size: 50%;\"> And </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> | </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Or </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-size: 50%;\"> ! </td>\n   <td style=\"text-align:left;font-size: 50%;\"> Opposite </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::::\n\n------------------------------------------------------------------------\n\n## Classes\n\n::: fragment\nGuess the output!\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nas.numeric(\"2022\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2022\n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\nWhat about this one?\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nas.character(2022-2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"-1\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\nAnd a final one.\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nas.character(2022>2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"FALSE\"\n```\n\n\n:::\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n## Classes\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"font-size: 20px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\"></caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:center;\"> numeric </th>\n   <th style=\"text-align:center;\"> character </th>\n   <th style=\"text-align:center;\"> logical </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> <b>as.numeric()</b> </td>\n   <td style=\"text-align:center;\"> No effect </td>\n   <td style=\"text-align:center;\"> Converts strings of numbers into numeric values <br> \n       Returns NA if characters in the string </td>\n   <td style=\"text-align:center;\"> Returns 1 if TRUE  <br>  \n       Returns 0 if FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <b>as.character()</b> </td>\n   <td style=\"text-align:center;\"> Converts numeric values <br> into strings of numbers </td>\n   <td style=\"text-align:center;\"> No effect </td>\n   <td style=\"text-align:center;\"> Returns \"TRUE\" if TRUE<br> \n       Returns \"FALSE\" if FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <b>as.logical</b>() </td>\n   <td style=\"text-align:center;\"> Returns TRUE if != 0 <br>  Returns FALSE if 0 </td>\n   <td style=\"text-align:center;\"> Returns TRUE if \"T\" or\"TRUE\" <br> \n       Returns FALSE if \"F\" or \"FALSE\" <br> \n       Returns NA otherwise </td>\n   <td style=\"text-align:center;\"> No effect </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n**NA** stands for 'Not Available', it corresponds to a **missing value**\n\n------------------------------------------------------------------------\n\n## Classes\n\nOne last mystery...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t380 obs. of  14 variables:\n $ Wk          : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Day         : chr  \"Fri\" \"Sat\" \"Sat\" \"Sun\" ...\n $ Date        : chr  \"2021-08-06\" \"2021-08-07\" \"2021-08-07\" \"2021-08-08\" ...\n $ Time        : chr  \"21:00\" \"17:00\" \"21:00\" \"13:00\" ...\n $ Home        : chr  \"Monaco\" \"Lyon\" \"Troyes\" \"Rennes\" ...\n $ xG          : num  2 1.4 0.8 0.6 0.7 0.4 0.8 2.1 0.7 0.5 ...\n $ Score       : chr  \"1-1\" \"1-1\" \"1-2\" \"1-1\" ...\n $ xG.1        : num  0.3 0.8 1.2 2 3.3 0.9 0.2 1.3 1.4 2 ...\n $ Away        : chr  \"Nantes\" \"Brest\" \"Paris S-G\" \"Lens\" ...\n $ Attendance  : int  7500 29018 15248 22567 18748 23250 18030 20461 15551 13500 ...\n $ Venue       : chr  \"Stade Louis II.\" \"Groupama Stadium\" \"Stade de l'Aube\" \"Roazhon Park\" ...\n $ Referee     : chr  \"Antony Gautier\" \"Mikael Lesage\" \"Amaury Delerue\" \"Bastien Dechepy\" ...\n $ Match.Report: chr  \"Match Report\" \"Match Report\" \"Match Report\" \"Match Report\" ...\n $ Notes       : logi  NA NA NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Classes\n\nAre these dollar signs here for a reason?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## 'data.frame':    380 obs. of  14 variables:\n##  $ Wk          \n##  $ Day         \n##  $ Date        \n##  $ Time        \n##  $ Home        \n##  $ xG          \n##  $ Score       \n##  $ xG.1        \n##  $ Away        \n##  $ Attendance  \n##  $ Venue       \n##  $ Referee     \n##  $ Match.Report\n##  $ Notes \n```\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Vectors\n\nIt's actually just a reference to the fact that `$` allows to **extract a variable** from a dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$Home\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"Monaco\"        \"Lyon\"          \"Troyes\"        \"Rennes\"       \n  [5] \"Bordeaux\"      \"Strasbourg\"    \"Nice\"          \"Saint-Étienne\"\n  [9] \"Metz\"          \"Montpellier\"   \"Lorient\"       \"Lille\"        \n [13] \"Paris S-G\"     \"Angers\"        \"Clermont Foot\" \"Brest\"        \n [17] \"Nantes\"        \"Reims\"         \"Lens\"          \"Marseille\"    \n [21] \"Brest\"         \"Monaco\"        \"Saint-Étienne\" \"Lyon\"         \n [25] \"Strasbourg\"    \"Metz\"          \"Montpellier\"   \"Bordeaux\"     \n [29] \"Rennes\"        \"Nantes\"        \"Nice\"          \"Marseille\"    \n [33] \"Troyes\"        \"Strasbourg\"    \"Angers\"        \"Lens\"         \n [37] \"Clermont Foot\" \"Lille\"         \"Reims\"         \"Lorient\"      \n [41] \"Paris S-G\"     \"Monaco\"        \"Montpellier\"   \"Rennes\"       \n [45] \"Bordeaux\"      \"Brest\"         \"Metz\"          \"Nantes\"       \n [49] \"Lyon\"          \"Strasbourg\"    \"Lens\"          \"Saint-Étienne\"\n [53] \"Nice\"          \"Troyes\"        \"Clermont Foot\" \"Reims\"        \n [57] \"Angers\"        \"Marseille\"     \"Paris S-G\"     \"Rennes\"       \n [61] \"Nantes\"        \"Lille\"         \"Montpellier\"   \"Monaco\"       \n [65] \"Lyon\"          \"Lens\"          \"Lorient\"       \"Angers\"       \n [69] \"Metz\"          \"Saint-Étienne\" \"Strasbourg\"    \"Paris S-G\"    \n [73] \"Lyon\"          \"Bordeaux\"      \"Troyes\"        \"Brest\"        \n [77] \"Reims\"         \"Clermont Foot\" \"Marseille\"     \"Lens\"         \n [81] \"Montpellier\"   \"Nice\"          \"Rennes\"        \"Lorient\"      \n [85] \"Monaco\"        \"Angers\"        \"Nantes\"        \"Lille\"        \n [89] \"Saint-Étienne\" \"Paris S-G\"     \"Clermont Foot\" \"Lyon\"         \n [93] \"Troyes\"        \"Brest\"         \"Bordeaux\"      \"Metz\"         \n [97] \"Strasbourg\"    \"Montpellier\"   \"Marseille\"     \"Saint-Étienne\"\n[101] \"Nantes\"        \"Lille\"         \"Nice\"          \"Rennes\"       \n[105] \"Lens\"          \"Lorient\"       \"Reims\"         \"Monaco\"       \n[109] \"Marseille\"     \"Nice\"          \"Paris S-G\"     \"Metz\"         \n[113] \"Lyon\"          \"Angers\"        \"Bordeaux\"      \"Troyes\"       \n[117] \"Montpellier\"   \"Strasbourg\"    \"Brest\"         \"Clermont Foot\"\n[121] \"Lens\"          \"Lille\"         \"Bordeaux\"      \"Marseille\"    \n[125] \"Saint-Étienne\" \"Lorient\"       \"Reims\"         \"Nantes\"       \n[129] \"Nice\"          \"Rennes\"        \"Monaco\"        \"Paris S-G\"    \n[133] \"Rennes\"        \"Brest\"         \"Metz\"          \"Angers\"       \n[137] \"Troyes\"        \"Strasbourg\"    \"Clermont Foot\" \"Lens\"         \n[141] \"Lille\"         \"Nice\"          \"Saint-Étienne\" \"Reims\"        \n[145] \"Lorient\"       \"Bordeaux\"      \"Monaco\"        \"Montpellier\"  \n[149] \"Marseille\"     \"Angers\"        \"Troyes\"        \"Strasbourg\"   \n[153] \"Brest\"         \"Metz\"          \"Rennes\"        \"Nantes\"       \n[157] \"Paris S-G\"     \"Lyon\"          \"Clermont Foot\" \"Marseille\"    \n[161] \"Lille\"         \"Lens\"          \"Saint-Étienne\" \"Montpellier\"  \n[165] \"Monaco\"        \"Reims\"         \"Lorient\"       \"Nice\"         \n[169] \"Bordeaux\"      \"Nantes\"        \"Brest\"         \"Reims\"        \n[173] \"Lille\"         \"Angers\"        \"Rennes\"        \"Troyes\"       \n[177] \"Metz\"          \"Strasbourg\"    \"Paris S-G\"     \"Lyon\"         \n[181] \"Saint-Étienne\" \"Lorient\"       \"Nice\"          \"Monaco\"       \n[185] \"Marseille\"     \"Montpellier\"   \"Troyes\"        \"Bordeaux\"     \n[189] \"Bordeaux\"      \"Lens\"          \"Brest\"         \"Metz\"         \n[193] \"Clermont Foot\" \"Nantes\"        \"Lyon\"          \"Nice\"         \n[197] \"Saint-Étienne\" \"Paris S-G\"     \"Rennes\"        \"Reims\"        \n[201] \"Monaco\"        \"Lorient\"       \"Strasbourg\"    \"Troyes\"       \n[205] \"Marseille\"     \"Clermont Foot\" \"Montpellier\"   \"Lille\"        \n[209] \"Lyon\"          \"Brest\"         \"Lens\"          \"Metz\"         \n[213] \"Clermont Foot\" \"Nantes\"        \"Angers\"        \"Bordeaux\"     \n[217] \"Montpellier\"   \"Paris S-G\"     \"Angers\"        \"Lyon\"         \n[221] \"Marseille\"     \"Saint-Étienne\" \"Monaco\"        \"Lorient\"      \n[225] \"Reims\"         \"Nice\"          \"Troyes\"        \"Strasbourg\"   \n[229] \"Rennes\"        \"Lille\"         \"Paris S-G\"     \"Montpellier\"  \n[233] \"Lyon\"          \"Monaco\"        \"Angers\"        \"Brest\"        \n[237] \"Nantes\"        \"Clermont Foot\" \"Lens\"          \"Metz\"         \n[241] \"Lille\"         \"Lens\"          \"Nantes\"        \"Nice\"         \n[245] \"Saint-Étienne\" \"Reims\"         \"Rennes\"        \"Lorient\"      \n[249] \"Bordeaux\"      \"Marseille\"     \"Montpellier\"   \"Strasbourg\"   \n[253] \"Paris S-G\"     \"Monaco\"        \"Angers\"        \"Metz\"         \n[257] \"Clermont Foot\" \"Brest\"         \"Troyes\"        \"Lyon\"         \n[261] \"Lorient\"       \"Lens\"          \"Nice\"          \"Saint-Étienne\"\n[265] \"Nantes\"        \"Reims\"         \"Rennes\"        \"Bordeaux\"     \n[269] \"Lille\"         \"Marseille\"     \"Lille\"         \"Montpellier\"  \n[273] \"Troyes\"        \"Paris S-G\"     \"Strasbourg\"    \"Clermont Foot\"\n[277] \"Metz\"          \"Angers\"        \"Lyon\"          \"Brest\"        \n[281] \"Saint-Étienne\" \"Lens\"          \"Nantes\"        \"Monaco\"       \n[285] \"Angers\"        \"Rennes\"        \"Bordeaux\"      \"Lorient\"      \n[289] \"Reims\"         \"Marseille\"     \"Nice\"          \"Lille\"        \n[293] \"Strasbourg\"    \"Metz\"          \"Saint-Étienne\" \"Troyes\"       \n[297] \"Montpellier\"   \"Clermont Foot\" \"Lyon\"          \"Paris S-G\"    \n[301] \"Lorient\"       \"Reims\"         \"Clermont Foot\" \"Bordeaux\"     \n[305] \"Monaco\"        \"Angers\"        \"Brest\"         \"Lens\"         \n[309] \"Strasbourg\"    \"Marseille\"     \"Rennes\"        \"Saint-Étienne\"\n[313] \"Lille\"         \"Nice\"          \"Nantes\"        \"Metz\"         \n[317] \"Montpellier\"   \"Troyes\"        \"Lyon\"          \"Paris S-G\"    \n[321] \"Reims\"         \"Monaco\"        \"Bordeaux\"      \"Lorient\"      \n[325] \"Troyes\"        \"Angers\"        \"Strasbourg\"    \"Lens\"         \n[329] \"Brest\"         \"Marseille\"     \"Lyon\"          \"Saint-Étienne\"\n[333] \"Paris S-G\"     \"Rennes\"        \"Metz\"          \"Nantes\"       \n[337] \"Nice\"          \"Clermont Foot\" \"Lille\"         \"Reims\"        \n[341] \"Strasbourg\"    \"Lens\"          \"Rennes\"        \"Troyes\"       \n[345] \"Brest\"         \"Monaco\"        \"Montpellier\"   \"Lorient\"      \n[349] \"Bordeaux\"      \"Marseille\"     \"Lille\"         \"Brest\"        \n[353] \"Metz\"          \"Clermont Foot\" \"Angers\"        \"Reims\"        \n[357] \"Lorient\"       \"Paris S-G\"     \"Nice\"          \"Nantes\"       \n[361] \"Nice\"          \"Bordeaux\"      \"Montpellier\"   \"Rennes\"       \n[365] \"Monaco\"        \"Troyes\"        \"Strasbourg\"    \"Metz\"         \n[369] \"Lyon\"          \"Saint-Étienne\" \"Lille\"         \"Brest\"        \n[373] \"Nantes\"        \"Clermont Foot\" \"Angers\"        \"Lorient\"      \n[377] \"Paris S-G\"     \"Reims\"         \"Marseille\"     \"Lens\"         \n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Vectors\n\n::::::::: incremental\n-   Variables are basically objects that we call vectors\n    -   Vectors are sequences of values that have the same class\n    -   R won't let you create a vector containing elements of different classes\n\n::: fragment\nWe make our own vectors using the `c()`oncatenate function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_vector <- c(\"Hello world\", 35, FALSE)\nsome_vector \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello world\" \"35\"          \"FALSE\"      \n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\nNote that R will coerce the different elements into the same class when we create a vector (in this case character)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(some_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n:::\n\n-   The fact that vectors are homogeneous in class allows that operations apply to all their elements\n\n:::::: fragment\n::::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3) / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3333333 0.6666667 1.0000000\n```\n\n\n:::\n:::\n\n\n:::\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 / c(1, 2, 3) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.0 1.5 1.0\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n::::::\n:::::::::\n\n------------------------------------------------------------------------\n\n## Subsetting\n\n-   With `$`, you can extract a single variable from a dataset\n-   You can extract several variables and specific observations from a data frame using `[]`\n\n$$\\text{data}[\\text{row(s)}, \\:\\:\\text{column(s)}]$$\n\n. . .\n\n::::::: columns\n:::: column\n::: fragment\n-   Inside the brackets, indicate what you want to keep using:\n    -   Indices: e.g., the third column has index 3\n    -   Logical: A vector of TRUE and FALSE\n    -   Names: They must be in quotation marks\n:::\n::::\n\n:::: column\n::: fragment\nExample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[1, c(\"Venue\", \"Attendance\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Venue Attendance\n1 Stade Louis II.       7500\n```\n\n\n:::\n:::\n\n\n\nWe can also subset single vectors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector <- c(3, 2, 1)\nvector[c(TRUE, TRUE, FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2\n```\n\n\n:::\n:::\n\n\n:::\n::::\n:::::::\n\n------------------------------------------------------------------------\n\n### Practice\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_5b0cae9b\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n1.  Download and import the dataset if you haven't already\n\n2.  Combine the use of `[]` and the function `nrow()` to obtain the last value of the `Wk` variable\n\n3.  Subset the home team, the score, and the away team for matches that occured during the last week\n\n::: callout-tip\nInstead of `str()`, you can use the `names()` function to display all the variable names of a data frame.\n:::\n\n------------------------------------------------------------------------\n\n### Solution\n\n1.  Download and import the dataset if you haven't already\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"/Users/jan/Downloads/ligue1.csv\")\n```\n:::\n\n\n\n2.  Combine the use of `[]` and the function `nrow()` to obtain the last value of the `Wk` variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_week <- data[nrow(data), \"Wk\"]\nlast_week\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 38\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n3.  Subset the home team, the score, and the away team for matches that occured during the last week\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Wk\"           \"Day\"          \"Date\"         \"Time\"         \"Home\"        \n [6] \"xG\"           \"Score\"        \"xG.1\"         \"Away\"         \"Attendance\"  \n[11] \"Venue\"        \"Referee\"      \"Match.Report\" \"Notes\"       \n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndata[Wk == last_week, c(\"Home\", \"Score\", \"Away\")]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'Wk' not found\n```\n\n\n:::\n:::\n\n\n:::\n\n:::: incremental\n-   Oops! Seems like R couldn't find the Wk variable\n    -   R was looking for Wk in our environment\n    -   But there is no Wk there\n-   We must refer to the data frame `data` which is in our environment\n    -   Then we can access Wk using the `$` symbol\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[data$Wk == last_week, c(\"Home\", \"Score\", \"Away\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Home Score          Away\n371         Lille   2-2        Rennes\n372         Brest   2-4      Bordeaux\n373        Nantes   1-1 Saint-Étienne\n374 Clermont Foot   1-2          Lyon\n375        Angers   2-0   Montpellier\n376       Lorient   1-1        Troyes\n377     Paris S-G   5-0          Metz\n378         Reims   2-3          Nice\n379     Marseille   4-0    Strasbourg\n380          Lens   2-2        Monaco\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n------------------------------------------------------------------------\n\n## Overview\n\n::::::: columns\n:::::: {.column width=\"50%\"}\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n1.  **Getting Started**\n    -   About R\n    -   The R Studio IDE\n    -   Import and eyeball data\n:::\n\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n2.  **Anatomy of a `data.frame`**\n    -   Data structure\n    -   Classes\n    -   Vectors\n    -   Subsetting\n:::\n\n::: {.fragment .fade-in}\n3.  **Wrap Up**\n    -   Summary and key take-aways\n:::\n::::::\n:::::::\n\n------------------------------------------------------------------------\n\n## Wrap Up\n\n::: fragment\n### Import data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"/Users/jan/Downloads/ligue1.csv\")\n```\n:::\n\n\n:::\n\n::: fragment\n### Class\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nis.numeric(\"1.6180339\") # What would be the output?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\n### Subsetting\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndata$Home[3] # What would be the output?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Troyes\"\n```\n\n\n:::\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n## Overview\n\n::::::::: columns\n:::::: {.column width=\"50%\"}\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n1.  **Getting Started**\n    -   About R\n    -   The R Studio IDE\n    -   Import and eyeball data\n:::\n\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n2.  **Anatomy of a `data.frame`**\n    -   Data structure\n    -   Classes\n    -   Vectors\n    -   Subsetting\n:::\n\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n3.  **Wrap Up**\n    -   Summary and key take-aways\n:::\n::::::\n\n:::: {.column width=\"50%\"}\n::: {.fragment .fade-in}\n4. **Markdown and universal writing** \n    - Office Model vs. Engineering Model\n    - Excel failures\n    - Markdown\n:::\n::::\n:::::::::\n\n# Markdown and universal writing\n\n## Office Model vs. Engineering Model\n\nWriting up research is a complicated, messy process!\n\n---\n\n## Office Model vs. Engineering Model\n\n- Loads of puzzle pieces:\n  - Data\n  - Statistical results\n  - Fieldwork\n  - Analysis\n  - Figures\n  - Tables\n  - Citations\n  - Text\n\n- Each of these comes from a different place\n\n---\n\n## Office Model vs. Engineering Model\n\nTwo general approaches for this mess:\n\n:::: {.columns}\n\n::: {.column}\n\nThe **Office** model\n\n  - Manually put everything in one document (and repeat often)\n\n:::\n\n::: {.column}\n\nThe **Engineering** model\n\n  - Work with the raw pieces and compile it all in the end \n  \n:::\n\n::::\n\n---\n\n## The Office Model \n\n:::: {.columns}\n\n::: {.column}\n\nEverything lives in one `.docx` file\n\n  - Drag images in\n  - Copy/paste stats from R \n  - Connect Word to Zotero or Endnote\n  - Track versions with filenames:\n    - `ms.docx`, `ms2_final.docx`, `ms2_final_final.docx`\n:::\n\n::: {.column}\n\nFinal output = `.docx` file\n\n![](images/office-model.png){width=\"500\"}\n\n:::\n\n::::\n\n---\n\n## The Engineering Model \n\n:::: {.columns}\n\n::: {.column}\n\nEverything lives separately and is combined in the end\n\n  - Type text in a plain text document\n  - Import images automatically\n  - Import stats automatically from R scripts (`.R` or `.qmd`) or `.do` files\n  - Store citations in reference manager\n  - Track versions with git\n  \n:::\n\n::: {.column}\n\nFinal output = whatever you want (Word, PDF, HTML)\n\n![](images/office-model.png){width=\"500\"}\n\n:::\n\n::::\n\n---\n\n## Office Model vs. Engineering Model\n\nThere is no one right way!\n\n::::: {.columns}\n\n:::: {.incremental}\n\n::: {.column style=\"font-size: smaller;\"}\n\nThe **Office** model\n\nCons:\n\n  - With changing analyses or data, manually updating your doc is laborous\n  - Chaos-prone: \n    - You got to remember which script generated what)\n  - Error-prone:\n    - It is easy to forget to update all figures, tables, results in text, etc.\n\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n\nThe **Engineering** model\n\nCons:\n\n  - A bit of an entry cost \n    - Need to learn a new coding language\n  - You'll always work with people who only use Word\n  \n:::\n\n::::\n\n::::\n\n---\n\n## Office Model vs. Engineering Model\n\n::::: {.columns}\n\n:::: {.incremental}\n\n::: {.column style=\"font-size: smaller;\"}\n\nThe **Office** model\n\nPros: \n\n  - No coding, easy environments\n  - The whole world runs on Word\n\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n\nThe **Engineering** model\n\nPros: \n\n  - Less **cognitive** load\n    - While everything seems complex in the beginning, no chaos because all is documented and transparent\n  - Less **work** load (in the long run)\n    - No need to copy/paste new results, add updated figures, reformat citation, etc.\n  - Transparency\n    - There's a record of everything you do\n    - Your findings are reproducible by anyone (and yourself!)\n  \n:::\n\n::::\n\n:::::\n\n---\n\n## Excel failures\n\n:::: {.columns}\n\n::: {.column style=\"font-size: smaller;\"}\n\n![](images/rr-abstract.png){width=\"500\"}\n\nDept:GDP ratio 90%+ &rarr; -0.1% growth\n\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n\n![Paul Ryan's 2013 House budget resolution](images/path-to-prosperity.jpg){width=\"300\"}\n:::\n\n::::\n\n--- \n\n\n## Excel failures\n\n:::: {.columns}\n\n::: {.column style=\"font-size: smaller;\"}\n\n![Thomas Herndon](images/thomas-herndon.jpg){width=\"300\"}\n\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n\n![From [Paul Krugman, \"The Excel Depression\"](https://www.nytimes.com/2013/04/19/opinion/krugman-the-excel-depression.html)](images/krugman-allowed.png){width=\"500\"}\n:::\n\n::::\n\n--- \n\n## Engineering model in real life\n\nPrivate companies and governments use the engineering model to write reports on data\n\n:::: {.columns}\n\n::: {.column style=\"font-size: smaller;\"}\n\n![[Airbnb](https://peerj.com/preprints/3182.pdf)](images/airbnb.png){width=\"500\"}\n\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n\n![](images/uk-long.png){width=\"500\"}\n\n![[The UK's reproducible analysis pipeline](https://dataingovernment.blog.gov.uk/2017/03/27/reproducible-analytical-pipeline/)](images/uk-short.png){width=\"300\"}\n:::\n\n::::\n\n--- \n\n## So, what is Markdown?\n\n- There are many different typesetting languages in which you can write. \n- The most widely used ones are perhaps LaTeX (mostly scientific work), HTML (web-based stuff) and Word.\n\n:::: {.columns}\n\n::: {.column}\n\n- How to get around learning all of them and having to switch for different outputs? \n  - Write in one simplified syntax (Markdown) \n  - Convert to whatever output you want\n\n:::\n\n::: {.column}\n\n![](images/md-to-everything.png){width=\"300\"}\n\n:::\n\n::::\n\n---\n\n## And what is RMarkdown/Quarto?\n\n- Quarto and RMarkdown are publishing systems which use markdown language. \n- They allow you to render to different outcome formats\n\n```sh\n# To HTML\nquarto render manuscript.qmd --to html\n\n# To Word\nquarto render manuscript.qmd --to docx\n\n# To PDF (through LaTeX)\nquarto render manuscript.qmd --to pdf\n```\n\n- They allow to combine code, figures, tables, images, text etc. (more on that now)\n\n--- \n\n## Overview\n\n::::::::: columns\n::: {.column style=\"font-size: smaller;\"}\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n1.  **Getting Started**\n    -   About R\n    -   The R Studio IDE\n    -   Import and eyeball data\n    -   Use functions\n:::\n\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n2.  **Anatomy of a `data.frame`**\n    -   Data structure\n    -   Classes\n    -   Vectors\n    -   Subsetting\n:::\n\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n3.  **Wrap Up**\n    -   Summary and key take-aways\n:::\n::::::\n\n::: {.column style=\"font-size: smaller;\"}\n\n::: {.fragment .semi-fade-out fragment-index=\"0\"}\n4. **Markdown and universal writing** \n    - Office Model vs. Engineering Model\n    - Excel failures\n    - Markdown\n:::\n\n::: {.fragment .fade-in}\n5.  **Writing reports in Quarto**\n    -   What is Quarto?\n    -   YAML header\n    -   Code chunks\n    -   Text formatting\n    -   Run and render your code\n    -   Inline code\n    -   Tables\n    -   Preset themes\n    -   Report parameters\n:::\n::::\n:::::::::\n\n\n# Writing reports in Quarto\n\n------------------------------------------------------------------------\n\n## What is Quarto?\n\n- Quarto is an open-source publishing system in which you can both write/run code (R/Python/Julia/Observable) and edit text\n\n- Quarto is the newer, fancier version of RMarkdown (which only worked with R code)\n\n- It is structured around 3 types of content:\n\n    -   Code chunks to run and render the output\n    -   Editable text to display\n    -   YAML metadata for the Quarto build process\n\n------------------------------------------------------------------------\n\n## What is Quarto?\n\n-   Let's create our first Quarto document!\n\n-   Click on File \\> New File \\> Quarto document\n\n![](images/new_quarto.png){width=\"500\"}\n\n------------------------------------------------------------------------\n\n## What is Quarto?\n\nIt creates a template containing the 3 types of content:\n\n::::: columns\n::: {.column width=\"30%\"}\n<br>\n\nYAML header\n\n<br> <br>\n\nText\n\n<br> <br>\n\nCode Chunk\n:::\n\n::: {.column width=\"70%\"}\n![](images/quarto_template.png){width=\"800\"}\n:::\n:::::\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### YAML Header\n\n-   The YAML header contains general information related to the file configuration:\n\n    -   Title/subtitle (in quotes)\n    -   Author/date (in quotes)\n    -   Output type (html/pdf)\n    -   Editor configuration (use source, not visual)\n    -   ...\n\n::: fragment\n-   It should be specified at the very beginning of the document and surrounded by three dashes like this:\n\n``` markdown\n---\ntitle: \"My first Quarto document\"\nsubtitle: \"What a blast\"\nauthor: \"My Name\"\ndate: \"05/01/2024\"\nformat: html\neditor: source\n---\n```\n:::\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### Code Chunks\n\n-   Code chunks are blocks of R code that can be run when working on and rendering the .qmd file\n\n::: fragment\n-   You can insert a code chunk using `Ctrl + Alt + i` or by typing the backticks chunk delimiters as follows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n:::\n\n\n:::\n\n::: fragment\n-   When rendering the document, R will execute the code\n    -   Both the code and the output will appear in the document like so\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### Code Chunks\n\n-   The **content** to be **displayed** from the code chunk can be specified in **chunk options**\n    -   For instance, to display only the output and not the code chunk, you can set `echo` to `FALSE`\n\n::::: columns\n::: column\n```` markdown\n```{r, echo = F}\n1+1\n```\n````\n:::\n\n::: column\n```` markdown\n```{r}\n#| echo: false\n1+1 \n```\n````\n:::\n:::::\n\n-   And the output will only be\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n-   Instead of\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### Code Chunks\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"font-size: 20px; width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Chunk Options to Know</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;text-align: center;\"> Option </th>\n   <th style=\"text-align:center;text-align: center;\"> Default </th>\n   <th style=\"text-align:left;text-align: center;\"> Effect </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> eval </td>\n   <td style=\"text-align:center;\"> TRUE </td>\n   <td style=\"text-align:left;\"> Whether to evaluate the code and include its results </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> echo </td>\n   <td style=\"text-align:center;\"> TRUE </td>\n   <td style=\"text-align:left;\"> Whether to display code along with its results </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> warning </td>\n   <td style=\"text-align:center;\"> TRUE </td>\n   <td style=\"text-align:left;\"> Whether to display warnings </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> error </td>\n   <td style=\"text-align:center;\"> TRUE </td>\n   <td style=\"text-align:left;\"> Whether to display errors </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> message </td>\n   <td style=\"text-align:center;\"> TRUE </td>\n   <td style=\"text-align:left;\"> Whether to display messages </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> results </td>\n   <td style=\"text-align:center;\"> 'markup' </td>\n   <td style=\"text-align:left;\"> 'hide' to hide the output </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fig.width </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:left;\"> Width in inches for plots created in chunk </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fig.height </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:left;\"> Height in inches for plots created in chunk </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### Code Chunks\n\n-   For an option to be the default for the whole document, set it up in the YAML header:\n\n``` markdown\n---\ntitle: \"My first Quarto document\"\nformat: html\nexecute:\n  echo: false\n  warning: false\n---\n```\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### Text Formatting\n\n-   Quarto is not only about rendering code but also about <b>writing</b> actual <b>text</b>\n\n  -   You can write paragraphs as you would normally do on a typical report\n  -   And Quarto provides convenient ways to format your text\n\n-   Unlike most text editing software, in source Quarto text formatting isn't about clicking on dedicated buttonds\n\n  -   It relies on symbols that should be written along with the text\n\n------------------------------------------------------------------------\n\n## Basic principles\n\n### Text Formatting\n\n::: {style=\"font-size: 0.6em; line-height: 1.2;\"}\n+------------------------------------------+-----------------------------------------------------------------------------+\n| Type...                                  | ...to get                                                                   |\n+==========================================+=============================================================================+\n| ``` default                              | Some text in a paragraph.                                                   |\n| Some text in a paragraph.                |                                                                             |\n|                                          | More text in the next paragraph. Always use empty lines between paragraphs. |\n| More text in the next paragraph. Always  |                                                                             |\n| use empty lines between paragraphs.      |                                                                             |\n| ```                                      |                                                                             |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| `*Italic*` or `_Italic_`                 | *Italic*                                                                    |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| `**Bold**` or `__Bold__`                 | **Bold**                                                                    |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| `# Heading 1`                            | # Heading 1                                                                 |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| `## Heading 2`                           | ## Heading 2                                                                |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| `### Heading 3`                          | ### Heading 3                                                               |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| (Go up to heading level 6 with `######`) |                                                                             |\n+------------------------------------------+-----------------------------------------------------------------------------+\n| `[Link text](https://www.example.com)`   | [Link text](https://www.example.com)                                        |\n+------------------------------------------+-----------------------------------------------------------------------------+\n\n------------------------------------------------------------------------\n:::\n\n---\n\n## Basic principles\n\n### Run and render your code\n\n:::: {.columns}\n\n::: {.column}\n\n- You have different options to execute the content of a code chunk in Quarto\n\n  - Check out the buttons at the top right of the chunk\n\n:::\n\n::: {.column}\n\n![](images/code_chunks.png){width=\"300\"}\n:::\n\n::::\n\n:::: {.columns}\n\n::: {.column}\n\n- To render a Quarto file, click on the render button\n\n:::\n\n::: {.column}\n\n![](images/render.png){width=\"300\"}\n:::\n\n::::\n\n---\n\n## Useful features\n\n### Inline code\n\n- Quarto allows to include R output directly in text\n- To do this, use `` `r r_code_here` ``\n\n\n````\n```{{r}}\n#| label: find-avg-mpg\n#| echo: false\nnumber_of_days <- 5\n```\n\nWe are `r number_of_days` days into the week. \n\n````\n\n\n\n::: {.cell}\n\n:::\n\n\n\n… would render to this:\n\n> We are 5 days into the week. \n\n---\n\n### That's it for today :)\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}