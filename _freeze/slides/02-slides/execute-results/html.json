{
  "hash": "547516578063c7d5f769be6c614bcd5b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data manipulation basics\"\nformat: \n  revealjs:\n    theme: simple\n    smaller: true\n    slide-number: true\n    # incremental: true\n    # code-link: true\n    chalkboard: true\n    history: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Overview\n\n::::: columns\n::: {.column style=\"font-size: smaller;\"}\n1.  **The `tidyverse`**\n    -   R Packages\n    -   Importing data\n2.  **The `dplyr` package**\n    -   `filter()`\n    -   `mutate()`\n    -   `ifelse()`\n    -   pipes `|>`\n    -   `summarize()`\n    -   `group_by()`\n:::\n\n::: {.column style=\"font-size: smaller;\"}\n3.  **The `tidy` data format**\n:::\n:::::\n\n# The `tidyverse`\n\n---\n\n## Packages\n\n::: {style=\"text-align: center;\"}\n![](images/packages-base.png)\n:::\n\n---\n\n## Packages\n\n::: {style=\"text-align: center;\"}\n![](images/packages-packages.png)\n:::\n\n---\n\n## Packages\n\n::: incremental\n-   So far we only used functions that are directly available in R\n    -   But there are tons of user-created functions out there that can make your life so much easier\n    -   These functions are shared in what we call packages\n-   Packages are bundles of functions that R users put at the disposal of other R users\n    -   Packages are centralized on the Comprehensive R Archive Network (CRAN)\n    -   To download and install a CRAN package you can simply type \\`install.packages()\n:::\n\n---\n\n## Using packages\n\n:::::::: incremental\n::::::: columns\n:::: {.column width=\"50%\"}\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"name\")\n```\n:::\n\n\n:::\n\n-   files to your computer\n\n-   Do this once per computer\n::::\n\n:::: {.column width=\"50%\"}\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"name\")\n```\n:::\n\n\n:::\n\n-   Loads the package\n\n-   Do this once per R session\n::::\n:::::::\n::::::::\n\n---\n\n## The `tidyverse`\n\n:::::: columns\n:::: {.column width=\"50%\"}\n\"The tidyverse is an opinionated collection of R packages designed for data science. [All packages share an underlying design philosophy, grammar, and data structures.\"]{.fragment .fade-in}\n\n::: fragment\n… the tidyverse makes data science faster, easier and more fun…\n:::\n::::\n\n::: {.column width=\"50%\"}\n![](images/tidyverse.png)\n:::\n::::::\n\n---\n\n## The `tidyverse`\n\n::: {style=\"text-align: center;\"}\n![](images/tidyverse-language.png)\n:::\n\n---\n\n## The `tidyverse`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nThe tidyverse package is a shortcut for installing and loading all the key tidyverse packages\n\n---\n\n## The `tidyverse`\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\nInstalls all of these:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"readr\")\ninstall.packages(\"purrr\")\ninstall.packages(\"tibble\")\ninstall.packages(\"stringr\")\ninstall.packages(\"forcats\")\ninstall.packages(\"lubridate\")\ninstall.packages(\"hms\")\ninstall.packages(\"DBI\")\ninstall.packages(\"haven\")\ninstall.packages(\"httr\")\ninstall.packages(\"jsonlite\")\ninstall.packages(\"readxl\")\ninstall.packages(\"rvest\")\ninstall.packages(\"xml2\")\ninstall.packages(\"modelr\")\ninstall.packages(\"broom\")\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nLoads all of these:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(lubridate)\n```\n:::\n\n\n:::\n:::::\n\n---\n\n## Importing data\n\n<table>\n  <tr>\n    <td><img src=\"images/readr.png\" alt=\"readr\" title=\"readr\" width=\"150px\"></td>\n    <td>Work with plain text data</td>\n    <td><code>my_data <- read_csv(\"file.csv\")</code></td>\n  </tr>\n  <tr>\n    <td><img src=\"images/readxl.png\" alt=\"readxl\" title=\"readxl\" width=\"150px\"></td>\n    <td>Work with Excel files</td>\n    <td><code>my_data <- read_excel(\"file.xlsx\")</code></td>\n  </tr>\n  <tr>\n    <td><img src=\"images/haven.png\" alt=\"haven\" title=\"haven\" width=\"150px\"></td>\n    <td>Work with Stata, SPSS, and SAS data</td>\n    <td><code>my_data <- read_stata(\"file.dta\")</code></td>\n  </tr>\n</table>\n\n---\n\n:::::: columns\n:::: column\n::: callout-tip\n## Data from R-Packages\n\nSome data sets can be downloaded as packages in R. For example, the [gapminder](https://www.gapminder.org/) data set.\n:::\n\nInstall the package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(gapminder)\n```\n:::\n\n\n\nThen load the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\nlibrary(gapminder)\n\n# The data() function in R is used to list, load, \n# and access built-in or package-provided datasets. \ndata(gapminder) \n```\n:::\n\n\n::::\n\n::: column\n![](images/gapminder.jpg){width=\"800\"}\n:::\n::::::\n\n# The `dplyr` package\n\n---\n\n::::::: columns\n:::: {.column width=\"50%\"}\n::: r-stack\n`tidyverse`{.fragment .fade-out fragment-index=\"1\"}\n\n`dplyr`{.fragment .fade-in fragment-index=\"1\"}\n:::\n::::\n\n:::: {.column width=\"50%\"}\n::: r-stack\n![](images/tidyverse.png){.fragment .semi-fade-out width=\"500\" fragment-index=\"1\"}\n\n![](images/dplyr-old.png){.fragment .fade-in .absolute fragment-index=\"1\" width=\"200\" top=\"40\" right=\"250\"}\n:::\n::::\n:::::::\n\n---\n\n## `dplyr`: verbs for manipulating data\n\n<table>\n  <tr>\n    <td>Extract rows with <code>filter()</code></td>\n    <td><img src=\"images/filter.png\" alt=\"filter\" title=\"filter\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Extract columns with <code>select()</code></td>\n    <td><img src=\"images/select.png\" alt=\"select\" title=\"select\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Arrange/sort rows with <code>arrange()</code></td>\n    <td><img src=\"images/arrange.png\" alt=\"arrange\" title=\"arrange\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Make new columns with <code>mutate()</code></td>\n    <td><img src=\"images/mutate.png\" alt=\"mutate\" title=\"mutate\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Make group summaries with <code>group_by() |> summarize()</code></td>\n    <td><img src=\"images/summarize.png\" alt=\"summarize\" title=\"summarize\" width=\"200px\"></td>\n  </tr>\n</table>\n\n---\n\n## `filter()`\n\nExtract rows that meet some sort of test\n\n:::::::: columns\n::: column\nThe general idea:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3\"}\nfilter(\n  some_data, \n  ... # one or more tests \n  )\n```\n:::\n\n\n:::\n\n:::::: column\n::: fragment\nLet's try this on the gapminder data set that you've installed earlier.\n:::\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(.data = gapminder, country == \"Denmark\")\n```\n:::\n\n\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:left;\"> continent </th>\n   <th style=\"text-align:left;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Denmark </td>\n   <td style=\"text-align:left;\"> Europe </td>\n   <td style=\"text-align:left;\"> 1952 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Denmark </td>\n   <td style=\"text-align:left;\"> Europe </td>\n   <td style=\"text-align:left;\"> 1957 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Denmark </td>\n   <td style=\"text-align:left;\"> Europe </td>\n   <td style=\"text-align:left;\"> 1962 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Denmark </td>\n   <td style=\"text-align:left;\"> Europe </td>\n   <td style=\"text-align:left;\"> 1967 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Denmark </td>\n   <td style=\"text-align:left;\"> Europe </td>\n   <td style=\"text-align:left;\"> 1972 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::::\n::::::::\n\n---\n\n## Logical tests\n\n::: {style=\"font-size: 3\"}\n+----------+--------------------------+-------------+-----------------------+\n| Test     | Meaning                  | Test        | Meaning               |\n+==========+==========================+=============+=======================+\n| `x < y`  | Less than                | `x %in% y`  | In (group membership) |\n+----------+--------------------------+-------------+-----------------------+\n| `x > y`  | Greater than             | `is.na(x)`  | Is missing            |\n+----------+--------------------------+-------------+-----------------------+\n| `==`     | Equal to                 | `!is.na(x)` | Is not missing        |\n+----------+--------------------------+-------------+-----------------------+\n| `x <= y` | Less than or equal to    |             |                       |\n+----------+--------------------------+-------------+-----------------------+\n| `x >= y` | Greater than or equal to |             |                       |\n+----------+--------------------------+-------------+-----------------------+\n| `x != y` | Not equal to             |             |                       |\n+----------+--------------------------+-------------+-----------------------+\n:::\n\n---\n\n## Your turn #1: Filtering\n\nUse `filter()` and logical tests to show…\n\n1.  The data for Canada\n2.  All data for countries in Oceania\n3.  Rows where the life expectancy is greater than 82\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_9a46d4a8\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #1: Filtering \n\nUse `filter()` and logical tests to show…\n\n::: fragment\n1.  The data for Canada\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, country == \"Canada\")\n```\n:::\n\n\n:::\n\n::: fragment\n2.  All data for countries in Oceania\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, continent == \"Oceania\")\n```\n:::\n\n\n:::\n\n::: fragment\n3.  Rows where the life expectancy is greater than 82\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, lifeExp > 82)\n```\n:::\n\n\n:::\n\n---\n\n## Common Mistakes\n\n::: fragment\nUsing `=` instead of `==`\n:::\n\n::::::: columns\n:::: column\n::: fragment\nBad\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, country = \"Canada\")\n```\n:::\n\n\n:::\n::::\n\n:::: column\n::: fragment\nGood\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, country == \"Canada\")\n```\n:::\n\n\n:::\n::::\n:::::::\n\n<br>\n\n<br>\n\n::: fragment\nForgetting quotes (`\"\"`)\n:::\n\n::::::: columns\n:::: column\n::: fragment\nBad\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, country == Canada)\n```\n:::\n\n\n:::\n::::\n\n:::: column\n::: fragment\nGood\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, country == \"Canada\")\n```\n:::\n\n\n:::\n::::\n:::::::\n\n---\n\n## `filter()` with multiple conditions \n\nExtract rows that meet *every* test\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nfilter(gapminder, country == \"Denmark\", year > 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  country continent  year lifeExp     pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n1 Denmark Europe     2002    77.2 5374693    32167.\n2 Denmark Europe     2007    78.3 5468120    35278.\n```\n\n\n:::\n:::\n\n\n\n---\n\n## Boolean operators\n\n+----------+---------+\n| Operator | Meaning |\n+==========+=========+\n| `a & b`  | and     |\n+----------+---------+\n| `a | b`  | or      |\n+----------+---------+\n| `!a`     | not     |\n+----------+---------+\n\n---\n\n## Boolean operators\n\n<br>\n\n**The default is \"and\"**\n\n<br>\n\n<br>\n\nThese do the same thing:\n\n::::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, \n       country == \"Denmark\", \n       year > 2000)\n```\n:::\n\n\n:::\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, \n       country == \"Denmark\" & \n         year > 2000)\n```\n:::\n\n\n:::\n:::::\n\n---\n\n## Your turn #2: Filtering\n\nUse `filter()` and Boolean logical tests to show…\n\n1.  Canada before 1970\n2.  Countries where life expectancy in 2007 is below 50\n3.  Countries where life expectancy in 2007 is below 50 and are not in Africa\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_cb0d8181\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #2: Filtering \n\nUse `filter()` and Boolean logical tests to show…\n\n1.  Canada before 1970\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, country == \"Canada\", year < 1970)\n```\n:::\n\n\n\n2.  Countries where life expectancy in 2007 is below 50\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, year == 2007, lifeExp < 50)\n```\n:::\n\n\n\n3.  Countries where life expectancy in 2007 is below 50 and are not in Africa\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, year == 2007, lifeExp < 50, \n       continent != \"Africa\")\n```\n:::\n\n\n\n---\n\n## Common Mistakes\n\n::: fragment\nCollapsing multiple tests into one\n:::\n\n::::::: columns\n:::: column\n::: fragment\nBad\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder, \n       1960 < year < 1980)\n```\n:::\n\n\n:::\n::::\n\n:::: column\n::: fragment\nGood\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder,\n       year > 1960, \n       year < 1980)\n```\n:::\n\n\n:::\n::::\n:::::::\n\n<br>\n\n<br>\n\n::: fragment\nUsing multiple tests instead of `%in%`\n:::\n\n::::::: columns\n:::: column\n::: fragment\nBad\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder,\n       country == \"Mexico\",\n       country == \"Canada\",\n       country == \"United States\")\n```\n:::\n\n\n:::\n::::\n\n:::: column\n::: fragment\nGood\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(gapminder,\n       country %in% c(\"Mexico\", \"Canada\",\n                      \"United States\"))\n```\n:::\n\n\n:::\n::::\n:::::::\n\n---\n\n## Common Syntax\n\nEvery `dplyr` verb function follows the same pattern\n\n<br>\n\n::::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nverb(data, ...)\n```\n:::\n\n\n:::\n\n::: column\n`verb` = dplyr function/verb\n\n`data` = data frame to transfom\n\n`...` = what you the verb to do exatly\n:::\n:::::\n\n---\n\n## `mutate()`\n\nCreate new columns\n\n::::::: columns\n::: column\nThe general idea:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3\"}\nmutate(\n  some_data, \n  ... # new columns to make\n  )\n```\n:::\n\n\n:::\n\n::::: column\n::: fragment\nLet's try this on the gapminder data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(gapminder, gdp = gdpPercap * pop)\n```\n:::\n\n\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:right;\"> year </th>\n   <th style=\"text-align:left;\"> … </th>\n   <th style=\"text-align:right;\"> gdp </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1952 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 6567086330 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1957 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 7585448670 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1962 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 8758855797 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1967 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 9648014150 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1972 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 9678553274 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1977 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 11697659231 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n:::::\n:::::::\n\n---\n\n## `mutate()`\n\nCreate new columns\n\n::::::: columns\n::: column\nThe general idea:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(\n  some_data, \n  ... # new columns to make\n  )\n```\n:::\n\n\n:::\n\n::::: column\nWe can also create multiple new columns at once\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(gapminder, gdp = gdpPercap * pop,\n                  pop_mil = round(pop / 1000000))\n```\n:::\n\n\n:::\n\n::: fragment\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:right;\"> year </th>\n   <th style=\"text-align:left;\"> … </th>\n   <th style=\"text-align:right;\"> gdp </th>\n   <th style=\"text-align:right;\"> pop_mil </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1952 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 6567086330 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1957 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 7585448670 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1962 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 8758855797 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1967 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 9648014150 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1972 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 9678553274 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:right;\"> 1977 </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:right;\"> 11697659231 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n:::::\n:::::::\n\n---\n\n## `ifelse()`\n\nDo conditional tests within `mutate()`\n\n<br>\n\n::::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nifelse(test,\n       value_if_true, \n       value_if_false)\n```\n:::\n\n\n:::\n\n::: column\n`test` = a logical test\n\n`value_if_true` = what happens if test is true\n\n`value_if_false` = what happens if test is false\n:::\n:::::\n\n---\n\n## `ifelse()`\n\nThe new variable can take any sort of class\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a new logical variable\nmutate(gapminder, \n       after_1960 = ifelse(year > 1960, TRUE, FALSE)\n       )\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a new character variable\nmutate(gapminder, \n       after_1960 = ifelse(year > 1960, \n                           \"After 1960\", \n                           \"Before 1960\")\n       )\n```\n:::\n\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a new numeric variable\nmutate(gapminder, \n       after_1960 = ifelse(year > 1960, 0, 1)\n       )\n```\n:::\n\n\n\n---\n\n## Your turn #3: Mutating\n\nUse `mutate()` to…\n\n1.  Add an `africa` column that is TRUE if the country is on the African continent\n2.  Add a column for logged GDP per capita (hint: use `log()`)\n3.  Add an `africa_asia` column that says “Africa or Asia” if the country is in Africa or Asia, and “Not Africa or Asia” if it’s not\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_10854903\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #3: Mutating \n\nUse `mutate()` to…\n\n::: fragment\n1.  Add an `africa` column that is TRUE if the country is on the African continent\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(gapminder, africa = ifelse(continent == \"Africa\", \n                                  TRUE, FALSE))\n```\n:::\n\n\n:::\n\n::: fragment\n2.  Add a column for logged GDP per capita (hint: use `log()`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(gapminder, log_gdpPercap = log(gdpPercap))\n```\n:::\n\n\n:::\n\n::: fragment\n3.  Add an `africa_asia` column that says “Africa or Asia” if the country is in Africa or Asia, and “Not Africa or Asia” if it’s not\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(gapminder, \n       africa_asia = \n         ifelse(continent %in% c(\"Africa\", \"Asia\"), \n                \"Africa or Asia\", \n                \"Not Africa or Asia\"))\n```\n:::\n\n\n:::\n\n---\n\n## What if you have multiple verbs?\n\n::: fragment\nSolution 1: Intermediate variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_2002 <- filter(gapminder, year == 2002)\n\ngapminder_2002_log <- mutate(gapminder_2002,\n                             log_gdpPercap = log(gdpPercap))\n```\n:::\n\n\n:::\n\n::: fragment\nSolution 2: Nested functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(mutate(gapminder_2002, \n              log_gdpPercap = log(gdpPercap)), \n       year == 2002)\n```\n:::\n\n\n:::\n\n::: fragment\nSolution 3: Pipes!\n\n-   The `|>` operator (pipe) takes an object on the left and passes it as the first argument of the function on the right\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(year == 2002) |> \n  mutate(log_gdpPercap = log(gdpPercap))\n```\n:::\n\n\n:::\n\n---\n\n## `|>`\n\nWhy using pipes?\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleave_house(get_dressed(get_out_of_bed(wake_up(me, time = \"8:00\"), side = \"correct\"),\n    pants = TRUE, shirt = TRUE), car = TRUE, bike = FALSE)\n```\n:::\n\n\n\n... 🤯 not easy to read\n:::\n\n<br>\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nme |> \n  wake_up(time = \"8:00\") |> \n  get_out_of_bed(side = \"correct\") |> \n  get_dressed(pants = TRUE, shirt = TRUE) |> \n  leave_house(car = TRUE, bike = FALSE)\n```\n:::\n\n\n\n... 🎉 easy to read\n:::\n\n---\n\n## `|>` vs `%>%`\n\n-   There are actually multiple pipes!\n\n-   `%>%` was invented first, but requires a package to use\n\n-   `|>` is part of base R\n\n-   They're interchangeable 99% of the time (Just be consistent)\n\n. . .\n\n::: callout-tip\n## You do not have to type the pipe by hand every time\n\nYou can use the shortcut `cmd + shift + m` in R Studio.\n:::\n\n---\n\n## `summarize()`\n\nCompute a table of summaries\n\n:::::::: columns\n:::: column\n::: fragment\n1.  Take a data frame\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:left;\"> continent </th>\n   <th style=\"text-align:left;\"> year </th>\n   <th style=\"text-align:left;\"> lifeExp </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1952 </td>\n   <td style=\"text-align:left;\"> 28.801 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1957 </td>\n   <td style=\"text-align:left;\"> 30.332 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1962 </td>\n   <td style=\"text-align:left;\"> 31.997 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1967 </td>\n   <td style=\"text-align:left;\"> 34.02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::\n\n::::: column\n::: fragment\n2.  Make a summary\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ngapminder |>\n    summarize(mean_life = mean(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_life\n      <dbl>\n1      59.5\n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\nOr several summaries\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ngapminder |> \n  summarize(mean_life = mean(lifeExp),\n            min_life = min(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_life min_life\n      <dbl>    <dbl>\n1      59.5     23.6\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n::::::::\n\n---\n\n## Your turn #4: Summarizing\n\nUse `summarize()` to calculate…\n\n1.  The first (minimum) year in the dataset\n2.  The last (maximum) year in the dataset\n3.  The number of rows in the dataset (use the cheatsheet)\n4.  The number of distinct countries in the dataset (use the cheatsheet)\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_5d20185b\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #4: Summarizing \n\nOne Solution for all:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  summarize(first = min(year),\n            last = max(year),\n            num_rows = n(),\n            num_unique = n_distinct(country))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  first  last num_rows num_unique\n  <int> <int>    <int>      <int>\n1  1952  2007     1704        142\n```\n\n\n:::\n:::\n\n\n\n---\n\n## Your turn #5: Summarizing\n\nUse `filter()` and `summarize()` to calculate...\n\n1.  the number of unique countries and\n2.  the median life expectancy\n\non the African continent in 2007.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e8be5cc7\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"top:0;right:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #5: Summarizing \n\nUse `filter()` and `summarize()` to calculate...\n\n1.  the number of unique countries and\n2.  the median life expectancy\n\non the African continent in 2007.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Africa\", year == 2007) |>\n  summarise(n_countries = n_distinct(country), \n            med_le = median(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  n_countries med_le\n        <int>  <dbl>\n1          52   52.9\n```\n\n\n:::\n:::\n\n\n\n---\n\n## `group_by()`\n\nPut rows into groups based on values in a column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> group_by(continent)\n```\n:::\n\n\n\n-   Nothing happens by itself!\n\n-   Powerful when combined with `summarize()`\n\n---\n\n## `group_by()`\n\n::::::: columns\n::: column\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:left;\"> continent </th>\n   <th style=\"text-align:left;\"> year </th>\n   <th style=\"text-align:left;\"> lifeExp </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1952 </td>\n   <td style=\"text-align:left;\"> 28.801 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1957 </td>\n   <td style=\"text-align:left;\"> 30.332 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1962 </td>\n   <td style=\"text-align:left;\"> 31.997 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:left;\"> 1967 </td>\n   <td style=\"text-align:left;\"> 34.02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n   <td style=\"text-align:left;\"> … </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n::::: column\n::: fragment\nA simple summary\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ngapminder |>\n    summarize(n_countries = n_distinct(country))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  n_countries\n        <int>\n1         142\n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\nA grouped summary\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ngapminder |> \n  group_by(continent) |> \n  summarize(n_countries = n_distinct(country)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  continent n_countries\n  <fct>           <int>\n1 Africa             52\n2 Americas           25\n3 Asia               33\n4 Europe             30\n5 Oceania             2\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n:::::::\n\n---\n\n## Your turn #6: Grouping and summarizing\n\n1.  Find the minimum, maximum, and median life expectancy for each continent\n\n<br>\n\n2.  Find the minimum, maximum, and median life expectancy for each continent in 2007 only\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_83040e3b\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #6: Grouping and summarizing \n\n1.  Find the minimum, maximum, and median life expectancy for each continent\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  group_by(continent) |> \n  summarize(min_le = min(lifeExp),\n            max_le = max(lifeExp),\n            med_le = median(lifeExp))\n```\n:::\n\n\n\n2.  Find the minimum, maximum, and median life expectancy for each continent in 2007 only\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(year == 2007) |> \n  group_by(continent) |> \n  summarize(min_le = min(lifeExp),\n            max_le = max(lifeExp),\n            med_le = median(lifeExp))\n```\n:::\n\n\n\n---\n\n## `dplyr`: verbs for manipulating data\n\n<table>\n  <tr>\n    <td>Extract rows with <code>filter()</code></td>\n    <td><img src=\"images/filter.png\" alt=\"filter\" title=\"filter\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Extract columns with <code>select()</code></td>\n    <td><img src=\"images/select.png\" alt=\"select\" title=\"select\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Arrange/sort rows with <code>arrange()</code></td>\n    <td><img src=\"images/arrange.png\" alt=\"arrange\" title=\"arrange\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Make new columns with <code>mutate()</code></td>\n    <td><img src=\"images/mutate.png\" alt=\"mutate\" title=\"mutate\" width=\"200px\"></td>\n  </tr>\n  <tr>\n    <td>Make group summaries with <code>group_by() |> summarize()</code></td>\n    <td><img src=\"images/summarize.png\" alt=\"summarize\" title=\"summarize\" width=\"200px\"></td>\n  </tr>\n</table>\n\n# Tidy data\n\n---\n\n## Tidy data\n\nYou can represent the same underlying data in multiple ways.\n\n:::::: columns\n::: {.column .fragment width=\"30%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"30%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <dbl> <chr>           <dbl>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"40%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n\n\n:::\n:::\n\n\n:::\n::::::\n\n---\n\n## Tidy data\n\n`Tidy` data has the following properties:\n\n::::: columns\n::: {.column width=\"30%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"70%\"}\n![](images/tidy-1.png){width=\"800\"}\n\n1.  Variables are columns\n2.  Observations are rows\n3.  Values are cells\n:::\n:::::\n\n---\n\n## Why ensure that your data is tidy?\n\nThere are two main advantages:\n\n::: fragment\n1.  There's a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it's easier to learn the tools that work with it because they have an underlying uniformity.\n:::\n\n::: fragment\n2.  There's a specific advantage to placing variables in columns because it allows R's vectorized nature to shine. As you learned in @sec-mutate and @sec-summarize, most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural.\n:::\n\n::: fragment\n`dplyr`, `ggplot2`, and all the other packages in the tidyverse are designed to work with tidy data.\n:::\n\n---\n\n## Will I ever encounter a dataset that isn't tidy?\n\n::: incremental\nYes, unfortunately, most real data is untidy.\n\nThere are two main reasons:\n\n1.  Data is often organized to facilitate some goal other than analysis. For example, it's common for data to be structured to make data entry, not analysis, easy.\n\n2.  Most people aren't familiar with the principles of tidy data, and it's hard to derive them yourself unless you spend a lot of time working with data.\n:::\n\n---\n\n## Pivoting data\n\n`tidyr` provides two main functions to \"pivot\" data in a tidy format: \n\n- `pivot_longer()` \n\nand \n\n- `pivot_wider()`\n\n<br>\n\nHere, we'll only discuss `pivot_longer()` because it's the most common case.\n\n---\n\n## `pivot_longer()`\n\n-   Suppose we have three patients with `id`s A, B, and C, and we take two blood pressure measurements on each patient.\n-   We'll create the data with `tribble()`, a handy function for constructing small tibbles by hand:\n\n:::{.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~id,  ~bp1, ~bp2,\n   \"A\",  100,  120,\n   \"B\",  140,  115,\n   \"C\",  120,  125\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  id      bp1   bp2\n  <chr> <dbl> <dbl>\n1 A       100   120\n2 B       140   115\n3 C       120   125\n```\n\n\n:::\n:::\n\n\n:::\n\n---\n\n## `pivot_longer()`\n\n-   We want our new dataset to have three variables: `id` (already exists), `measurement` (the column names), and `value` (the cell values)\n-   To achieve this, we need to pivot `df` longer\n\n![](images/variables.png){width=\"800\"}\n\n---\n\n## `pivot_longer()`\n\n-   The values in a column that was already a variable in the original dataset (`id`) need to be repeated, once for each column that is pivoted.\n\n![](images/variables.png){width=\"800\"}\n\n---\n\n## `pivot_longer()`\n\n- The column names become values of the new variable `measurement`\n\n![](images/column-names.png){width=\"800\"}\n\n---\n\n## `pivot_longer()`\n\n-   The cell values become values of the new variable `value`\n\n![](images/cell-values.png){width=\"800\"}\n\n---\n\n## `pivot_longer()`\n\n::::{.columns}\n\n:::{.column}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  id      bp1   bp2\n  <chr> <dbl> <dbl>\n1 A       100   120\n2 B       140   115\n3 C       120   125\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  pivot_longer(\n    cols = bp1:bp2,\n    names_to = \"measurement\",\n    values_to = \"value\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  id    measurement value\n  <chr> <chr>       <dbl>\n1 A     bp1           100\n2 A     bp2           120\n3 B     bp1           140\n4 B     bp2           115\n5 C     bp1           120\n6 C     bp2           125\n```\n\n\n:::\n:::\n\n\n:::\n\n:::{.column}\n\nThere are three key arguments:\n\n-   `cols` specifies which columns need to be pivoted, i.e. which columns aren't variables. This argument uses the same syntax as `select()` \n-   `names_to` names the variable in which column names should be stored\n-   `values_to` names the variable in which cell values should be stored\n\n:::\n\n::::\n\n---\n\n\n## Your turn #7: Pivoting \n\nThe `billboard` dataset which comes with the `tidyverse` package records the billboard rank of songs in the year 2000.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(billboard)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  <chr>       <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 2 Pac       Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n2 2Ge+her     The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n3 3 Doors Do… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n4 3 Doors Do… Loser 2000-10-21      76    76    72    69    67    65    55    59\n5 504 Boyz    Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n6 98^0        Give… 2000-08-19      51    39    34    26    26    19     2     2\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>,\n#   wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n- In this dataset, each observation is a song.\n- The first three columns (`artist`, `track` and `date.entered`) are variables that describe the song.\n- Then we have 76 columns (`wk1`-`wk76`) that describe the rank of the song in each week.\n\n## Your turn #7: Pivoting \n\n1. Use `pivot_longer()` to tidy the data (Tip: Create the new variables `week` and `rank`). Assign the resulting data frame to a new data frame called `tidy_billboard`. \n\n2. Use the new `tidy_billboard` data frame to calculate which song has been the longest on rank 1 (Tip: use `filter()`, `group_by()` and `summarize()`)\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_1554c9d4\" data-update-every=\"1\" data-start-immediately=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n---\n\n## Your turn #7: Pivoting \n\n1. Use `pivot_longer()` to tidy the data (Tip: Create the new variables `week` and `rank`). Assign the resulting data frame to a new data frame called `tidy_billboard`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_billboard <- billboard |> \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\"\n  ) \n```\n:::\n\n\n\n2. Use the new `tidy_billboard` data frame to calculate which song has been the longest on rank 1 (Tip: use `filter()`, `group_by()` and `summarize()`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_billboard |> \n  filter(rank == 1) |> \n  group_by(track) |> \n  summarize(weeks_on_rank_1 = n()) |> \n  arrange(desc(weeks_on_rank_1)) \n\n# alternative solution\ntidy_billboard |> \n  group_by(track) |> \n  summarize(weeks_on_rank_1 = sum(rank == 1, na.rm = TRUE)) |> \n  arrange(desc(weeks_on_rank_1)) \n```\n:::\n\n\n\n---\n\n## That's it for today :)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}