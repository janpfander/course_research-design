{
  "hash": "83f7fdc27fe1fc63557b17421ddd3304",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Power Simulation\"\n---\n\n\n\n\n\n\n::: {.callout-warning}\nYou don't have much experience with writing your own functions yet. Don't despair, try to follow along as best as you can. \n:::\n\nWe start, as always, by loading the libraries we'll use.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(truncnorm)\n```\n:::\n\n\n\n\n\n\nSince we're running a simulation, we will also set a seed to make it all reproducible. \n\n\n\n\n\n\n\n\n\n\n\n\n\nThis guide picks up from where lecture 6 on power analysis ends.\n\nIn a power simulation, for a given effect size, we would like to know at which sample size we achieve our desired statistical power. \n\nImagine we want to know how big a sample we need, to detect a difference of -0.5 between action and comedy movies, assuming we want at least a power of 80%.\n\n## Step 1: Generate a single sample and calculate the outcome\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set some sample size\nsample_size = 1000\n\n# generate a single random sample\nsample <- tibble(\n  movie_id = 1:sample_size,\n  genre = sample(c(\"Comedy\", \"Action\"), size = sample_size, replace = TRUE),\n  rating = ifelse(\n    genre == \"Comedy\",\n    rtruncnorm(sample_size, a = 1, b = 10, mean = 6.0, sd = 2), \n    rtruncnorm(sample_size, a = 1, b = 10, mean = 5.5, sd = 2)   \n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  movie_id genre  rating\n     <int> <chr>   <dbl>\n1        1 Comedy   6.15\n2        2 Action   6.68\n3        3 Comedy   3.63\n4        4 Comedy   6.02\n5        5 Action   2.66\n6        6 Comedy   9.19\n```\n\n\n:::\n:::\n\n\n\n\n\n\nTo be able to use this later, we turn it into a function. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_sample <- function(sample_size){\n  sample <- tibble(\n  movie_id = 1:sample_size,\n  genre = sample(c(\"Comedy\", \"Action\"), size = sample_size, replace = TRUE),\n  rating = ifelse(\n    genre == \"Comedy\",\n    rtruncnorm(sample_size, a = 1, b = 10, mean = 6.0, sd = 2), \n    rtruncnorm(sample_size, a = 1, b = 10, mean = 5.5, sd = 2)   \n  )\n)\n  \n  return(sample)\n}\n```\n:::\n\n\n\n\n\n\nNow we can call this function. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample <- generate_sample(sample_size = 1000) \n\nhead(sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  movie_id genre  rating\n     <int> <chr>   <dbl>\n1        1 Action   6.47\n2        2 Action   3.80\n3        3 Comedy   3.95\n4        4 Comedy   9.39\n5        5 Comedy   5.91\n6        6 Comedy   6.82\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Step 2: Get an estimate\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestimate <- sample |> \n  group_by(genre) |> \n  summarize(avg_rating = mean(rating)) |> \n  summarise(diff = avg_rating[genre == \"Action\"] - avg_rating[genre == \"Comedy\"]) %>%\n  pull(diff)\n\nestimate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.5484191\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAgain, let's put this in a function\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_estimate <- function(sample){\n  estimate <- sample |> \n    group_by(genre) |> \n    summarize(avg_rating = mean(rating)) |> \n    summarise(diff = avg_rating[genre == \"Action\"] - avg_rating[genre == \"Comedy\"]) %>%\n    pull(diff)\n  \n  return(estimate)\n}\n```\n:::\n\n\n\n\n\n\nAgain, we can now call this function.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_estimate(sample = sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.5484191\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Step 3: Repeat\n\nLet's say we want to have 1000 samples for our sampling distribution, so we repeat the above process 1000 times.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_simulations <- 1000\n\n# make an empty vector\nestimates <- c()\n\nfor (i in 1:n_simulations) {\n  # draw a sample \n  sample <- generate_sample(sample_size = 1000) \n  \n  # get an estimate\n  estimate <- generate_estimate(sample = sample)\n  \n  estimates[i] <- estimate\n}\n```\n:::\n\n\n\n\n\n\nWe can plot the results to see if it worked as we expected.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(estimates), aes(x = estimates)) +\n  geom_histogram() +\n  labs(title = \"Sampling Distribution of Estimates\",\n       x = \"Mean Rating Difference (Action - Comedy)\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](power_simulation_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSeems good.\n\nAgain, let's put this into a function\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_samples <- function(n_simulations, sample_size) {\n  \n  # Make an empty vector\n  estimates <- numeric(n_simulations)\n  \n  for (i in 1:n_simulations) {\n    # Draw a sample with the specified size\n    sample <- generate_sample(sample_size) \n    \n    # Get an estimate\n    estimates[i] <- generate_estimate(sample)\n  }\n  \n  return(estimates)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nestimates <- generate_samples(n_simulations = 500, sample_size = 500)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(estimates), aes(x = estimates)) +\n  geom_histogram() +\n  labs(title = \"Sampling Distribution of Estimates\",\n       x = \"Mean Rating Difference (Action - Comedy)\",\n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](power_simulation_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWorks fine again.\n\n## Step 4: Calculate power\n\nTo calculate the power, we first test the statistical significance for each of our 1000 estimates.\n\nTo do so, we bring our estimate to the scale of the standard normal distribution and check if it's smaller than -1.96. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_power <- function(estimates){\n  \n  # bring on standard normal distribution scale\n  estimates_standardized <- estimates/sd(estimates)\n  \n  # get statistical power \n  power <- data.frame(estimates_standardized) |> \n    mutate(significant = ifelse(estimates_standardized <= -1.96, TRUE, FALSE)) |> \n    summarize(share_significant = sum(significant) / n()) |> \n    pull(share_significant)\n  \n  return(power)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_power(estimates = estimates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.736\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Step 5: Bring it all together\n\nWe now put all the above functions into a final `power_simulation` function. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower_simulation <- function(sample_size, n_simulations = 1000) {\n  \n  # Generate multiple samples and compute estimates\n  estimates <- generate_samples(n_simulations, sample_size)\n  \n  # Calculate statistical power\n  power <- calculate_power(estimates)\n  \n  # Return results\n  return(tibble(\n    sample_size = sample_size,\n    n_simulations = n_simulations,\n    estimated_power = power,\n    mean_effect = mean(estimates),\n    sd_effect = sd(estimates)\n  ))\n}\n```\n:::\n\n\n\n\n\n\nLet's test this function\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# run a power simulation for sample size 1000\npower_simulation(sample_size = 1000, n_simulations = 1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 5\n  sample_size n_simulations estimated_power mean_effect sd_effect\n        <dbl>         <dbl>           <dbl>       <dbl>     <dbl>\n1        1000          1000           0.935      -0.422     0.121\n```\n\n\n:::\n:::\n\n\n\n\n\nðŸŽ‰ Seems to have worked just fine. \n\n## Step 6: Repeat the whole process\n\nWe write a for loop, for different sample sizes we would like to test. Remember that the output of our `power_data()` function is a data frame, so we initialize an empty data frame where we can store the results of all iterations. \n\nNote that running the code chunk below takes a couple of seconds. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_sizes <- c(50, 100, 500, 1000)\n\n# make an empty data frame\npower_data <- tibble()\n\nfor (i in sample_sizes) {\n  # run power simulation\n  power <- power_simulation(sample_size = i, n_simulations = 1000)\n  \n  power_data <- bind_rows(power_data, power)\n}\n\npower_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 5\n  sample_size n_simulations estimated_power mean_effect sd_effect\n        <dbl>         <dbl>           <dbl>       <dbl>     <dbl>\n1          50          1000           0.127      -0.432     0.518\n2         100          1000           0.208      -0.423     0.371\n3         500          1000           0.751      -0.436     0.169\n4        1000          1000           0.971      -0.431     0.111\n```\n\n\n:::\n:::\n\n\n\n\n\nðŸŽ‰ Worked!\n\nWe can plot the results. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(power_data, \n       aes(x = sample_size, y = estimated_power)) +\n  geom_line(color = 'red', size = 1.5) + \n  # add a horizontal line at 80%\n  geom_hline(aes(yintercept = .8), linetype = 'dashed') + \n  # Prettify!\n  theme_minimal() + \n  scale_y_continuous(labels = scales::percent, limits = c(0,1)) + \n  labs(title = \"Power Simulation for a difference of -0.5 between action and comedy movies\",\n       x = 'Sample Size', y = 'Power')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](power_simulation_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nFrom the curve, we can read that we reach our desired power level somewhere between a sample size of 500 and 1000, but a lot closer to 500. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "power_simulation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}