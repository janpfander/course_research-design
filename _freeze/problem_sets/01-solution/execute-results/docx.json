{
  "hash": "53811c8944f504853120cbdf9f1ab3be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Problem set 1\"\nauthor: \"Put your name here\"\nformat: \n  html:\n    toc: true\n  pdf:\n    toc: true\n  docx:\n    toc: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n# Learning R\n\n# Read the data\n\n> Read the `cars.csv` data into R. Make sure to use the correct path (\"data/cars.csv\"). Name the data frame \"cars\" when reading it in. You don't need to understand what all the variables mean. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- read_csv(\"../data/cars.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 234 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): manufacturer, model, trans, drv, fl, class\ndbl (5): displ, year, cyl, cty, hwy\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n# What's the class of the `model` and the `year` variable?\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(cars$model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(cars$year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n> Subset the cars data by selecting only rows that correspond to the manufacturer \"honda\" and that shows only the columns for models and the year. Name that subset \"honda_data\" and print it. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhonda_data <- cars[cars$manufacturer == \"honda\", c(\"model\", \"year\")]\n\n# alternative\nhonda_data <- cars %>%\n  filter(manufacturer == \"honda\") %>%\n  select(model, year)\n```\n:::\n\n\n\n\n\n\n\n\n# My first plots\n\n> You haven't learned about plots yet. But to give you a taste for what's coming, execute the code chunk below and let the magic happen. Make sure your data frame is named \"cars\" for this to work\n\nA plot on the distance that cars can travel per gallon. Note that we will hide the code when rendering by setting `echo: false`.\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](01-solution_files/figure-docx/plot-data-1.png)\n:::\n:::",
    "supporting": [
      "01-solution_files/figure-docx"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}